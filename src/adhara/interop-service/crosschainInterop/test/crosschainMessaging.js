const CrosschainMessaging = artifacts.require("CrosschainMessaging");
const ethers = require('ethers');
const ethJsUtil = require('ethereumjs-util')

contract("CrosschainMessaging", async accounts => {
  let instance = null

  const testData = {
    eventLogs: '0xf903e4018401eac6fabf902d8f8b994d920222bc1741461a651c6c3af456660a66e618ae1a0f0e25c63981e9a617375c8244c8ac144e4e520acc2cb08e2d4c3781b1a02c067b8800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004039306464333835316539363932313963613733316139656263656364643065363930393434643062646633393461613238663537353639393362316661636464f9021a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a07a752c4d100a96be23f60f072fed1f33da2890fbe45eb15af52750faa2772a92b901e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc425000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001448903901f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000000104532452d7474766c373874773975377700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b485447424742303047425000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    blockHash: '0x789874e5aeb303c1f73b49223cd3f1d1c78178eed36ee62bbf3c9ca4684294d8',
    receiptsRoot: '0xbebb5a604846804f1c5c9db1728eff0999b777e278e50431fab206e1a9e5d29e',
    witnesses: '0xf903f0f903ed822080b903e7f903e4018401eac6fabf902d8f8b994d920222bc1741461a651c6c3af456660a66e618ae1a0f0e25c63981e9a617375c8244c8ac144e4e520acc2cb08e2d4c3781b1a02c067b8800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004039306464333835316539363932313963613733316139656263656364643065363930393434643062646633393461613238663537353639393362316661636464f9021a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a07a752c4d100a96be23f60f072fed1f33da2890fbe45eb15af52750faa2772a92b901e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc425000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001448903901f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000000104532452d7474766c373874773975377700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b485447424742303047425000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    rlpBlockHeader: '0xf90220a0949f74633f9dee323b510e7e307a7b1ea0cd12b68682a33979ff018cb11f5626a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0dfb06d6c0723d9b4013c14fd8c07f8b0e6db4175c29c8f04b1b4f4320f7ce548a0250c7960f1714e97d0c0283609722b5d251ef3ccb11daecebe98a6f0e4a59a63a0bebb5a604846804f1c5c9db1728eff0999b777e278e50431fab206e1a9e5d29ebe8405f5e1008401eac6fa8466040e26a5e4a00000000000000000000000000000000000000000000000000000000000000000c0c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000',
    rlpBlockHeaderPreimage: '0xf90221a0949f74633f9dee323b510e7e307a7b1ea0cd12b68682a33979ff018cb11f5626a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0dfb06d6c0723d9b4013c14fd8c07f8b0e6db4175c29c8f04b1b4f4320f7ce548a0250c7960f1714e97d0c0283609722b5d251ef3ccb11daecebe98a6f0e4a59a63a0bebb5a604846804f1c5c9db1728eff0999b777e278e50431fab206e1a9e5d29eb90100000000000000080000000000000000000008004000000000000000004000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000080000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010000000000000000000000000182012e8405f5e1008401eac6fa8466040e26a6e5a00000000000000000000000000000000000000000000000000000000000000000c0c080c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000',
    rlpValidatorSignatures: '0xf843b841a27e8dc683cf2dd4c2c56d4ba6a1bc2a0a2c53e4099f07860c8a6394e560295c0df732ff957c1b5e8dfef7e8c91fdc1bc06ba2d8746555a24039db75d0025c7901',
    networkId: '3',
    contractAddress: '0x37bCb3CAc66F4d859a4eF77dcD97EEc146BBC425',
    callParameters: '0x8903901f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000000104532452d7474766c373874773975377700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030474250000000000000000000000000000000000000000000',
    sourceHash: '0x60c358ad239809bbb9637df32d0e9937a237eb0d67ea5349abb8dc618d142e47'
  }

  beforeEach(async () => {
    instance = await CrosschainMessaging.new()
  })

  it("should be able to set the validator list", async () => {
    const networkId = 1
    const validatorList = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    await instance.setValidatorList(networkId, 5, validatorList)

    const fetchedvalidatorList = await instance.getValidatorList(networkId, 5)
    assert.equal(validatorList[0], fetchedvalidatorList[0].toLowerCase())
  })

  it("should be able to get the validator list", async () => {
    const networkId = 1
    const validatorList = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    await instance.setValidatorList(networkId, 5, validatorList)

    const sameBlockValidatorList = await instance.getValidatorList(networkId, 5)
    assert.equal(validatorList[0], sameBlockValidatorList[0].toLowerCase())

    const aheadBlockValidatorList = await instance.getValidatorList(networkId, 6)
    assert.equal(validatorList[0], aheadBlockValidatorList[0].toLowerCase())
    try {
      await instance.getValidatorList(networkId, 4)
      assert.fail('Should fail to retrieve validators for old blocks before validator updates')
    } catch (e) {}
  })

  it("should be able to set the validator list to multiple validators", async () => {
    const networkId = 1
    const validatorList = ['0xca31306798b41bc81c43094a1e0462890ce7a673', '0x049eb617fba599e3d455da70c6730abc8cc4221d', '0x06c3f482f18711be95adf106afa25cd13897fbe7']
    await instance.setValidatorList(networkId, 5, validatorList)

    const sameBlockValidatorList = await instance.getValidatorList(networkId, 6)
    assert.equal(validatorList[0], sameBlockValidatorList[0].toLowerCase())
    assert.equal(validatorList[1], sameBlockValidatorList[1].toLowerCase())
    assert.equal(validatorList[2], sameBlockValidatorList[2].toLowerCase())
  })

  it("should be able to increase the number of validators", async () => {
    const networkId = 1
    const validatorList0 = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    const validatorList1 = ['0xca31306798b41bc81c43094a1e0462890ce7a673', '0x049eb617fba599e3d455da70c6730abc8cc4221d', '0x06c3f482f18711be95adf106afa25cd13897fbe7']

    await instance.setValidatorList(networkId, 5, validatorList0)
    await instance.setValidatorList(networkId, 15, validatorList1)
    const firstValidatorList = await instance.getValidatorList(networkId, 6)
    assert.equal(firstValidatorList.length, 1)
    assert.equal(validatorList0[0], firstValidatorList[0].toLowerCase())
    const secondValidatorList = await instance.getValidatorList(networkId, 16)
    assert.equal(secondValidatorList.length, 3)
    assert.equal(validatorList1[0], secondValidatorList[0].toLowerCase())
    assert.equal(validatorList1[1], secondValidatorList[1].toLowerCase())
    assert.equal(validatorList1[2], secondValidatorList[2].toLowerCase())
    try {
      await instance.getValidatorList(networkId, 4)
      assert.fail('Should fail to retrieve validators for old blocks before validator updates')
    } catch (e) {}
  })

  it("should be able to increase and then decrease the number of validators", async () => {
    const networkId = 1
    const validatorList0 = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    const validatorList1 = ['0xca31306798b41bc81c43094a1e0462890ce7a673', '0x049eb617fba599e3d455da70c6730abc8cc4221d', '0x06c3f482f18711be95adf106afa25cd13897fbe7']
    const validatorList2 = ['0x049eb617fba599e3d455da70c6730abc8cc4221d']

    await instance.setValidatorList(networkId, 5, validatorList0)
    await instance.setValidatorList(networkId, 15, validatorList1)
    await instance.setValidatorList(networkId, 20, validatorList2)
    const firstValidatorList = await instance.getValidatorList(networkId, 6)
    assert.equal(firstValidatorList.length, 1)
    assert.equal(validatorList0[0], firstValidatorList[0].toLowerCase())
    const secondValidatorList = await instance.getValidatorList(networkId, 16)
    assert.equal(secondValidatorList.length, 3)
    assert.equal(validatorList1[0], secondValidatorList[0].toLowerCase())
    assert.equal(validatorList1[1], secondValidatorList[1].toLowerCase())
    assert.equal(validatorList1[2], secondValidatorList[2].toLowerCase())
    const thirdValidatorList = await instance.getValidatorList(networkId, 21)
    assert.equal(thirdValidatorList.length, 1)
    assert.equal(validatorList2[0], thirdValidatorList[0].toLowerCase())
    try {
      await instance.getValidatorList(networkId, 4)
      assert.fail('Should fail to retrieve validators for old blocks before validator updates')
    } catch (e) {}
  })

  it("should be able to remove a set of validators", async () => {
    const networkId = 1
    const validatorList0 = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    const validatorList1 = ['0x049eb617fba599e3d455da70c6730abc8cc4221d', '0x06c3f482f18711be95adf106afa25cd13897fbe7']

    await instance.setValidatorList(networkId, 5, validatorList0)
    await instance.setValidatorList(networkId, 15, validatorList1)
    await instance.removeValidatorList(networkId, 5)
    try {
      await instance.removeValidatorList(networkId, 16)
      assert.fail('Should fail to remove validators when block number does not match exactly')
    } catch (e) {}
    const firstValidatorList = await instance.getValidatorList(networkId, 16)
    assert.equal(firstValidatorList.length, 2)
    assert.equal(validatorList1[0], firstValidatorList[0].toLowerCase())
    assert.equal(validatorList1[1], firstValidatorList[1].toLowerCase())
    try {
      await instance.getValidatorList(networkId, 6)
      assert.fail('Should fail to retrieve validators for old blocks where validator updates weer deleted')
    } catch (e) {}
  })

  it("should be able to handle Ethereum block header proving scheme", async () => {
    const validatorList = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    await instance.setValidatorList(0, 5, validatorList)
    let index = -1
    const encodedReceipt = ethers.utils.RLP.decode(testData.eventLogs)
    const eventSig = web3.utils.soliditySha3('CrossBlockchainCallExecuted(uint256,address,bytes)')
    const toNetworkId = 3;
    for (let i = 0; i < encodedReceipt[3].length; i++) {
      const encodedLog = encodedReceipt[3][i];
      const topic = encodedLog[1];
      if (topic[0] === eventSig) {
        const eventData = ''+encodedLog[2]
        const eventParameters = web3.eth.abi.decodeParameters(['uint256', 'address', 'bytes'], eventData);
        const destinationNetworkId = Number(eventParameters['0'])
        if (toNetworkId === destinationNetworkId) {
          index = i;
          break;
        }
      }
    }
    assert.equal(index >= 0, true, 'No remote function call events were found for destination network')

    let validatorSignatures = ethers.utils.RLP.decode(testData.rlpValidatorSignatures)
    const signatures = []
    for (let i = 0; i < validatorSignatures.length; i++) {
      let res = ethJsUtil.fromRpcSig(validatorSignatures[i])
      let publicKey = ethJsUtil.ecrecover(ethJsUtil.toBuffer(ethers.utils.keccak256(testData.rlpBlockHeaderPreimage)), res.v, res.r, res.s);
      let address = ethJsUtil.pubToAddress(publicKey).toString("hex");
      let signature = {
        by: '0x'+address,
        sigR: '0x'+ res.r.toString('hex'),
        sigS: '0x' + res.s.toString('hex'),
        sigV: '0x000000000000000000000000000000000000000000000000000000000000000'+(res.v-27),
        meta: '0x'
      }
      signatures.push(signature);
    }
    const eventData = web3.eth.abi.encodeParameters([ eventDataStruct ], [
      {
        index: '0x' + index.toString(16),
        signature: eventSig,
        logs: testData.eventLogs
      }
    ])
    const blockHeaderMeta = web3.eth.abi.encodeParameters([ blockHeaderMetaStruct ], [
      {
        rlpBlockHeader: testData.rlpBlockHeader,
        rlpBlockHeaderPreimage: testData.rlpBlockHeaderPreimage
      }
    ])
    const encodedInfo = web3.eth.abi.encodeParameters(['uint256', 'address', 'bytes'], [0, '0x0000000000000000000000000000000000000000', eventData])
    const encodedProof = web3.eth.abi.encodeParameters([ encodedProofStruct ], [
      {
        typ: 0,
        ProofData: {
          witnesses: testData.witnesses,
          root: testData.receiptsRoot,
          blockHash: testData.blockHash,
          blockHeaderMeta: blockHeaderMeta,
        },
        Signature: signatures
      }
    ])
    const result = await instance.handleEthereumBlockHeaderProvingScheme(0, encodedInfo, encodedProof)
    assert.equal(result.networkId, testData.networkId)
    assert.equal(result.contractAddress, testData.contractAddress)
    assert.equal(result.callParameters, testData.callParameters)
    assert.equal(result.sourceHash, testData.sourceHash)
  })

  it("should be able to decode and verify for a block header transfer based proof", async () => {
    const networkId = 0
    const validatorList = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    await instance.setValidatorList(networkId, 5, validatorList)
    await instance.onboardProvingScheme(networkId, 2)

    let validatorSignatures = ethers.utils.RLP.decode(testData.rlpValidatorSignatures)
    const signatures = []
    for (let i = 0; i < validatorSignatures.length; i++) {
      let res = ethJsUtil.fromRpcSig(validatorSignatures[i])
      let publicKey = ethJsUtil.ecrecover(ethJsUtil.toBuffer(ethers.utils.keccak256(testData.rlpBlockHeaderPreimage)), res.v, res.r, res.s);
      let address = ethJsUtil.pubToAddress(publicKey).toString("hex");
      let signature = {
        by: '0x'+address,
        sigR: '0x'+ res.r.toString('hex'),
        sigS: '0x' + res.s.toString('hex'),
        sigV: '0x000000000000000000000000000000000000000000000000000000000000000'+(res.v-27),
        meta: '0x'
      }
      signatures.push(signature);
    }
    const eventData = web3.eth.abi.encodeParameters([ eventDataStruct ], [
      {
        index: 1,
        signature: web3.utils.soliditySha3('CrossBlockchainCallExecuted(uint256,address,bytes)'),
        logs: testData.eventLogs
      }
    ])
    const blockHeaderMeta = web3.eth.abi.encodeParameters([ blockHeaderMetaStruct ], [
      {
        rlpBlockHeader: testData.rlpBlockHeader,
        rlpBlockHeaderPreimage: testData.rlpBlockHeaderPreimage
      }
    ])
    const encodedInfo = web3.eth.abi.encodeParameters(['uint256', 'address', 'bytes'], [0, '0x0000000000000000000000000000000000000000', eventData])
    const encodedProof = web3.eth.abi.encodeParameters([ encodedProofStruct ], [
      {
        typ: 0,
        ProofData: {
          witnesses: testData.witnesses,
          root: testData.receiptsRoot,
          blockHash: testData.blockHash,
          blockHeaderMeta: blockHeaderMeta,
        },
        Signature: signatures
      }
    ])

    try{
      await instance.decodeAndVerify(networkId, encodedInfo, encodedProof)
    } catch (err){
      assert.fail('No revert expected:', err)
    }
  })

  it("should be able to onboard parameter handlers for a new callable function", async () => {
    const networkId = 0
    const handlers = [{
      'fingerprint': 'net.corda:rniw7B2Mqi7zlkPpKmJ77A==',
      'componentIndex': '0x01',
      'describedSize': '0x02',
      'describedType': 'String',
      'describedPath': '0x06',
      'solidityType': 'string',
      'calldataPath': '0x00',
      'parser': 'PathParser',
    }]
    const functionPrototype = 'doXYZ(string)'
    const functionSignature = web3.eth.abi.encodeFunctionSignature(functionPrototype);
    const functionCommand = 'net.corda.samples.example.contracts.XVPContract$Commands$XYZ'
    try {
      let result = await instance.setParameterHandlers(networkId, functionSignature, functionPrototype, functionCommand, handlers);
      assert.equal(result.receipt.status, true)
      let query = await instance.getParameterHandler(networkId, functionSignature, 0);
      let decoded = web3.eth.abi.decodeParameters([{
        'ParameterHandler': {
          'fingerprint': 'string',
          'componentIndex': 'uint8',
          'describedSize': 'uint8',
          'describedType': 'string',
          'describedPath': 'bytes',
          'solidityType': 'string',
          'calldataPath': 'bytes',
          'parser': 'string',
        },
      }], query);
      let response = {
        'fingerprint': decoded['0'].fingerprint,
        'componentIndex': decoded['0'].componentIndex,
        'describedSize': decoded['0'].describedSize,
        'describedType': decoded['0'].describedType,
        'describedPath': decoded['0'].describedPath,
        'solidityType': decoded['0'].solidityType,
        'calldataPath': decoded['0'].calldataPath,
        'parser': decoded['0'].parser,
      };
      assert.equal(response.fingerprint, handlers[0].fingerprint)
      assert.equal(response.componentIndex, parseInt(handlers[0].componentIndex, 16))
      assert.equal(response.describedSize, parseInt(handlers[0].describedSize, 16))
      assert.equal(response.describedType, handlers[0].describedType)
      assert.equal(response.describedPath, handlers[0].describedPath)
      assert.equal(response.solidityType, handlers[0].solidityType)
      assert.equal(response.calldataPath, handlers[0].calldataPath)
      assert.equal(response.parser, handlers[0].parser)
      let prototype = await instance.getFunctionPrototype(networkId, functionSignature);
      assert.equal(prototype, functionPrototype)
      let command = await instance.getFunctionCommand(networkId, functionSignature);
      assert.equal(command, functionCommand)
    } catch (err){
      console.log({err})
      assert.fail('No revert expected:', err)
    }
  })

  it("should be able to handle Corda multivalued Merkle proving scheme", async () => {
    const testData = [{
      id: "Adhara Full Proof",
      prefix: '636F726461010000',
      participants: [
        '0x05121082FDB58A7200CD3A2C5E0D6EE0F7359BB1DE3D564AFAA4B6EA48215553',
        '0x10846F893F927F9280CE43B8D7AFF71A27ABABF4CEEF4AF0473445C82760EB1F',
      ],
      notary: '0x914F6A6C07B746ED9250F09BF282BC624678DFC799CA7987C539936610C5E51B',
      components: [
        '0x
        '0x
        '0x
        '0x
      groupIndices: ['0x01', '0x02', '0x04', '0x06'],
      internalIndices: ['0x00', '0x00', '0x00', '0x00'],
      salt: '0xC1BC6BDED3F6C53AF524899E3D3F4802ACD83641098D8045B24AF78CDDD97127',
      root: '0xB4806B29A30DDC3D3101A6D3815C7ADC5AE9D2146BB2D9B2DE285164C5949D68',
      tradeId: '3c983847',
      receiver: 'Tz1QYXJ0eUEsIEw9TG9uZG9uLCBDPUdC',
      sender: 'Tz1QYXJ0eUIsIEw9TmV3IFlvcmssIEM9VVM=',
      controlContract: '0xc23cdfef6ec7b1b39c6cb898d7acc71437f167bd',
      sourceNetworkId: '0x03',
      holdAmount: '0x64', // 100.00;
      leaves: [
        '0xB8BB30F55628E724B79B2CB37AD4AA37770372A1A05B9F7DC20D2268CE800B52',
        '0xA9A1A5A3C52D202A2A8E01467A1BD2CAAE2ADBA9439034D715FE6DAA1A1714A7',
        '0x67484A7345BB3A74B460F3BE50EC2E2932C75DDC5CC54E3B5A2E9DE5EE950839',
        '0xE75B1375A5F0E9340202ACA639ED23CC615975CED94DFEC6CB33503E05CE980F',
        '0x279157F88B8F92BD2A1422B0329E7EF5F077819DBB5676D71FD88B29E85AF10E',
        '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
        '0x279157F88B8F92BD2A1422B0329E7EF5F077819DBB5676D71FD88B29E85AF10E',
        '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
        '0x09863B8396B6CCAB72B062D32F9DE0BEF35A4088D638DB0FF3CF915D55C0E6C3',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
      ],
      witnesses: [
        '0xB8BB30F55628E724B79B2CB37AD4AA37770372A1A05B9F7DC20D2268CE800B52',
        '0xE75B1375A5F0E9340202ACA639ED23CC615975CED94DFEC6CB33503E05CE980F',
        '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
        '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
        '0x459857381F609585A7DD2CB215562E70D6B3D4A742DAFA871BE8285017CD7004',
      ],
      flags: ['0x03', '0x01', '0x01', '0x01', '0x00', '0x00', '0x00', '0x01'],
      values: [
        '0xA9A1A5A3C52D202A2A8E01467A1BD2CAAE2ADBA9439034D715FE6DAA1A1714A7',
        '0x67484A7345BB3A74B460F3BE50EC2E2932C75DDC5CC54E3B5A2E9DE5EE950839',
        '0x279157F88B8F92BD2A1422B0329E7EF5F077819DBB5676D71FD88B29E85AF10E',
        '0xAC9907227A54CDD6CF0FC718465CEB1247998A015CAAC2260AEACC18573AE3D3'
      ],
      signatures: [{
        'by': '0x05121082FDB58A7200CD3A2C5E0D6EE0F7359BB1DE3D564AFAA4B6EA48215553',
        'sigR': '0xDB6BFE41DA08DE43C05712084DDF1AE752F32E1E92F6E4DDA4DFC9188A73C3E4',
        'sigS': '0xD25B7C2060C4548BA355BFD107B10008474D5090E0A20199A2A33BD2A713D500',
        'sigV': '0x0000000000000000000000000000000000000000000000000000000000000000',
        'meta': '0x0000000A00000004B4806B29A30DDC3D3101A6D3815C7ADC5AE9D2146BB2D9B2DE285164C5949D68',
      }, {
        'by': '0x10846F893F927F9280CE43B8D7AFF71A27ABABF4CEEF4AF0473445C82760EB1F',
        'sigR': '0x74688DFCC622049755F5EF4772ACAE524905EF8C642FE016C77496124ADD3C2E',
        'sigS': '0x359240642E137F87B20E11A7FA4A056CA05DCD5DC40E34DE1DABEAC22CDE670A',
        'sigV': '0x0000000000000000000000000000000000000000000000000000000000000000',
        'meta': '0x0000000A00000004B4806B29A30DDC3D3101A6D3815C7ADC5AE9D2146BB2D9B2DE285164C5949D68',
      }, {
        'by': '0x914F6A6C07B746ED9250F09BF282BC624678DFC799CA7987C539936610C5E51B',
        'sigR': '0x6CDC95342596FCA0A01D11246B646511A3D193CF523EE1B6C87157B1C794EE45',
        'sigS': '0xB95C41E8ED320FF0A062B7B7623EB3FAFC9704972B3E43F6302085F8913D6605',
        'sigV': '0x0000000000000000000000000000000000000000000000000000000000000000',
        'meta': '0x0000000A00000004DA1B788A9B8F32E3D10F21A35FEAEDCDC77F74B040E7A8FDB2DD676CF42AB61A',
      }],
      eventSig: '0x0000000000000000000000000000000000000000000000000000000000000000',
      handlers: configurationAdhara.handlers,
      prototype: configurationAdhara.prototype,
      command: configurationAdhara.command,
      callParameters: '0xc6755b7c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c23cdfef6ec7b1b39c6cb898d7acc71437f167bd00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000833633938333834370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024547a315159584a306555497349457739546d563349466c76636d737349454d3956564d3d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020547a315159584a306555457349457739544739755a4739754c43424450556443',
      sourceHash: '0x4f8cf727bb3add5720c146c119d12351f81f2a15d07b46309f8dae6a4fe5e0e2'
    }]
    for (let t=0; t<testData.length; t++) {
      const td = testData[t];
      await instance.addNotary(td.sourceNetworkId, td.notary)
      for (let p=0; p<td.participants.length; p++) {
        await instance.addParticipant(td.sourceNetworkId, td.participants[p])
      }
      const signature = web3.eth.abi.encodeFunctionSignature(td.prototype)
      await instance.setParameterHandlers(td.sourceNetworkId, signature, td.prototype, td.command, td.handlers);
      let eeaProof = encodeMultiComponentProofData(td)
      try {
        const result = await instance.handleCordaTransactionProvingScheme(td.sourceNetworkId, eeaProof.encodedInfo, eeaProof.encodedProof)
        assert.equal('0x0' +result.networkId, td.sourceNetworkId)
        assert.equal(result.contractAddress.toLowerCase(), td.controlContract)
        assert.equal(result.callParameters, td.callParameters)
        assert.equal(result.sourceHash, td.sourceHash)
      } catch (err) {
        console.log({err})
        assert.fail('No revert expected:', err)
      }
    }
  })

  it("should be able to handle Corda signature-based proving scheme", async () => {
    const notary = '0x6D506B9617E2191E63F8B1C1EDF2125FE2FA7911B3B04D1BBD3E4E4EC456EAB6'
    const contract = '0xc23cdfef6ec7b1b39c6cb898d7acc71437f167bd'
    const networkId = '0x00'
    const eventSig = '0x0000000000000000000000000000000000000000000000000000000000000000'
    const callData = '0xc6755b7c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c23cdfef6ec7b1b39c6cb898d7acc71437f167bd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004030353066383336316239373465326436633031323234333536623363396462336466323566643332643161326336356666376136346233646163613331613532000000000000000000000000000000000000000000000000000000000000000b464e555355533030555344000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b464e474247423030555344000000000000000000000000000000000000000000'
    const txRoot = '0x050f8361b974e2d6c01224356b3c9db3df25fd32d1a2c65ff7a64b3daca31a52'
    const command = 'net.corda.samples.example.contracts.DCRContract$Commands$Earmark'
    const prototype = 'requestFollowLeg(string,string,string,address,uint256,uint256)'
    const handlers = [{
      'fingerprint': 'tradeId',
      'componentIndex': '0x00',
      'describedSize': '0x00',
      'describedType': 'bytes32',
      'describedPath': '0x00',
      'solidityType': 'string',
      'calldataPath': '0x00',
      'parser': 'NoParser',
    }];
    const eventData = web3.eth.abi.encodeParameters([
    {
      'EventData': {
        'callParameters': 'bytes',
        'hashAlgorithm': 'string',
        'privacySalt': 'bytes32',
        'ComponentData[]': {
          'groupIndex': 'uint8',
          'internalIndex': 'uint8',
          'encodedBytes': 'bytes',
        },
      },
    }],
    [{
      'callParameters': callData,
      'hashAlgorithm': 'SHA-256',
      'privacySalt': '0x0000000000000000000000000000000000000000000000000000000000000000',
      'ComponentData': [{
        'groupIndex': '0x00',
        'internalIndex': '0x00',
        'encodedBytes': '0x00',
      }]
    }])
    const encodedInfo = web3.eth.abi.encodeParameters(
      ['uint256', 'address', 'bytes'],
      [networkId, contract, eventData]
    )
    const signatureOrProof = web3.eth.abi.encodeParameters(
      [
        {
          'Proof':{
            'typ': 'uint256',
            'ProofData':{
              'root':'bytes32',
              'witnesses':'bytes32[]',
              'flags':'uint8[]',
              'values':'bytes32[]',
            },
            'Signature[]':{
              'by':'uint256',
              'sigR':'uint256',
              'sigS':'uint256',
              'sigV':'uint256',
              'meta':'bytes',
            }
          },
        },
      ],
      [
        {
          'typ': 0,
          'ProofData': {
            'root': txRoot,
            'witnesses': [],
            'flags': [],
            'values': [],
          },
          'Signature':[{
            'by': '0x6D506B9617E2191E63F8B1C1EDF2125FE2FA7911B3B04D1BBD3E4E4EC456EAB6',
            'sigR': '0x954F9847F03B356085FAB1C249A96D63DFE7269599E16D6939B6B140EEF31AFF',
            'sigS': '0x05EA1DBFD9441CA931DD1A1B2302E19CB9BF435C3007C91200EB703751FC9F07',
            'sigV': '0x0000000000000000000000000000000000000000000000000000000000000000',
            'meta': '0x0000000700000004A6477EF88AE34B4CE26ED1EA8BEE10BCEC7F461C9EF92E91B504275744E04C38'
          }],
        }
      ]
    )
    await instance.addNotary(networkId, notary)
    const signature = web3.eth.abi.encodeFunctionSignature(prototype)
    await instance.setParameterHandlers(networkId, signature, prototype, command, handlers);
    try {
      const result = await instance.handleCordaTradeProvingScheme(networkId, encodedInfo, signatureOrProof)
      assert.equal(result.sourceHash, '0x7aaf26eb310ceffac4ecebcccf033cc64e28a20a87ccfe3a0ef4ed311a527edb')
    } catch (err){
      console.log({err})
      assert.fail('No revert expected:', err)
    }
  })
})

const configurationAdhara = {
  handlers: [{
    'fingerprint': 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
    'componentIndex': '0x00',
    'describedSize': '0x08',
    'describedType': 'String',
    'describedPath': '0x06',
    'solidityType': 'string',
    'calldataPath': '0x00',
    'parser': 'PathParser',
  }, {
    'fingerprint': 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
    'componentIndex': '0x01',
    'describedSize': '0x06',
    'describedType': 'String',
    'describedPath': '0x00',
    'solidityType': 'string',
    'calldataPath': '0x01',
    'parser': 'PartyParser',
  }, {
    'fingerprint': 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
    'componentIndex': '0x00',
    'describedSize': '0x06',
    'describedType': 'String',
    'describedPath': '0x00',
    'solidityType': 'string',
    'calldataPath': '0x02',
    'parser': 'PartyParser',
  }, {
    'fingerprint': '',
    'componentIndex': '0x00',
    'describedSize': '0x00',
    'describedType': '',
    'describedPath': '0x00',
    'solidityType': 'address',
    'calldataPath': '0x03',
    'parser': 'NoParser',
  }, {
    'fingerprint': '',
    'componentIndex': '0x00',
    'describedSize': '0x00',
    'describedType': '',
    'describedPath': '0x00',
    'solidityType': 'uint256',
    'calldataPath': '0x04',
    'parser': 'NoParser',
  }, {
    'fingerprint': 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
    'componentIndex': '0x00',
    'describedSize': '0x08',
    'describedType': 'String',
    'describedPath': '0x07',
    'solidityType': 'uint256',
    'calldataPath': '0x05',
    'parser': 'PathParser',
  }],
  prototype: 'requestFollowLeg(string,string,string,address,uint256,uint256)',
  command: 'net.corda.samples.example.contracts.DCRContract$Commands$Earmark'
}

function encodeMultiComponentProofData(td) {
  const functionSignature = web3.eth.abi.encodeFunctionSignature('requestFollowLeg(string,string,string,address,uint256,uint256)');
  const functionParameters = web3.eth.abi.encodeParameters(
    ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
    [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
  )
  const callParameters = functionSignature + functionParameters.substring(2);
  const eventData = web3.eth.abi.encodeParameters(
    [
      {
        'EventData': {
          'callParameters': 'bytes',      // Parameters of the function we want to call through the interop service.
          'hashAlgorithm': 'string',      // Hash algorithm used in the Merkle tree. Only SHA-256 is currently supported.
          'privacySalt': 'bytes32',       // Salt needed to compute a Merkle tree leaf.
          'ComponentGroup[]': {
            'groupIndex': 'uint8',
            'internalIndex': 'uint8',
            'encodedBytes': 'bytes',      // Hash of this component becomes the value we want to proof Merkle tree membership of.
          },
        },
      },
    ],
    [
      {
        'callParameters': callParameters,
        'hashAlgorithm': 'SHA-256',
        'privacySalt': td.salt,
        'ComponentGroup': [{
          'groupIndex': td.groupIndices[0],
          'internalIndex': td.internalIndices[0],
          'encodedBytes': td.components[0],
        }, {
          'groupIndex': td.groupIndices[1],
          'internalIndex': td.internalIndices[1],
          'encodedBytes': td.components[1],
        }, {
          'groupIndex': td.groupIndices[2],
          'internalIndex': td.internalIndices[2],
          'encodedBytes': td.components[2],
        }, {
          'groupIndex': td.groupIndices[3],
          'internalIndex': td.internalIndices[3],
          'encodedBytes': td.components[3],
        }]
      }
    ]
  )
  const encodedInfo = web3.eth.abi.encodeParameters(['uint256', 'address', 'bytes'], [td.sourceNetworkId, td.controlContract, eventData])
  const encodedProof = web3.eth.abi.encodeParameters([{
    Proof: {
      typ: 'uint256',
      ProofData: {
        root: 'bytes32',
        witnesses: 'bytes32[]',
        flags: 'uint8[]',
        values: 'bytes32[]',
      },
      'Signature[]': {
        by: 'uint256',
        sigR: 'uint256',
        sigS: 'uint256',
        sigV: 'uint256',
        meta: 'bytes',
      }
    }
  }], [
    {
      typ: 0,
      ProofData: {
        root: td.root,
        witnesses: td.witnesses,
        flags: td.flags,
        values: td.values,
      },
      Signature: td.signatures,
    }
  ])
  return { encodedInfo, encodedProof };
}

const eventDataStruct = {
  EventData: {
    index: 'uint256',
    signature: 'bytes32',
    logs: 'bytes',
  },
}

const blockHeaderMetaStruct = {
  BlockHeaderMeta: {
    rlpBlockHeader: 'bytes',
    rlpBlockHeaderPreimage: 'bytes'
  }
}

const encodedProofStruct = {
  Proof: {
    typ: 'uint256',
    ProofData: {
      witnesses: 'bytes',
      root: 'bytes32',
      blockHash: 'bytes32',
      blockHeaderMeta: 'bytes',
    },
    'Signature[]': {
      by: 'uint256',
      sigR: 'uint256',
      sigS: 'uint256',
      sigV: 'uint256',
      meta: 'bytes',
    }
  }
}
