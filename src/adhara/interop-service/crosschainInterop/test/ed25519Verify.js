const ED25519Verify = artifacts.require("ED25519Verify");

const crypto = require('crypto');
var EC = require('elliptic').ec;

contract("ED25519Verify", async accounts => {

  let instance = null

  beforeEach(async () => {
    instance = await ED25519Verify.new()
  })

  it("should be able to verify general ED25519 signatures", async () => {
    try {
      let pub = "06cf14cfae0ff9fe7fdf773202029a3e8976465c8919f4840d1c3c77c8162435";
      let msg = "b0d8bdfd9f4d1023dae836b2e41da5019d20c60965dc40943e2c10f2ad4ee49ab0d8bdfd9f4d1023dae836b2e41da5019d20c60965dc";
      let sig = "a6161c95fd4e3237b7dd12cc3052aaa69382510ecb5b89c2fbeb8b6efb78266b81160af2842235a0257fc1d3e968c2c1c9f56f117da3186effcaeda256c38a0d";
      const [r, s] = [sig.substring(0,64), sig.substring(64)];
      const result = await instance.verify(`0x${pub}`, `0x${r}`, `0x${s}`, `0x${msg}`)
      assert.equal(result, true)
    } catch (err){
      console.log({err})
      assert.fail('No revert expected:', err)
    }
  })

  // it("should be able to verify general ED25519 signatures with events", async () => {
  //   try {
  //     const { publicKey, privateKey } = crypto.generateKeyPairSync('ed25519');
  //     let pub = publicKey.export({ format: 'der', type: 'spki' }).toString('hex').substring(24)
  //     console.log({pub});
  //     let msg = 'aa7af2abdaa2e37785b23aec36f73a3280ff1326595d0f976532ff8246d8536c';
  //     console.log({msg});
  //     const signature = crypto.sign(null, Buffer.from(msg), privateKey);
  //     let sig = signature.toString('hex');
  //     const verified = crypto.verify(null, Buffer.from(msg), publicKey, signature);
  //     assert.equal(verified, true)
  //     const [r, s] = [sig.substring(0,64), sig.substring(64)];
  //     const result = await instance.verifyWithEvent(`0x${pub}`, `0x${r}`, `0x${s}`, `0x${msg}`)
  //     assert.equal(result.receipt.status, true)
  //     console.log('Gas used to compute verify signature: ' + result.receipt.gasUsed)
  //     for (let decodedLog of result.receipt.logs) {
  //       let key = decodedLog.args['1'].toString();
  //       let value = decodedLog.args['0'].toString();
  //       if (key === 'Verification result')
  //         assert.equal(value, true);
  //     }
  //
  //   } catch (err){
  //     console.log({err})
  //     assert.fail('No revert expected:', err)
  //   }
  // })

  it("should be able to verify first corda ED25519 signature", async () => {
    try {
      let pub = "9f51381f955eb5f946fa187f3ef817e29f93d13f8092bea5932e92a682544a86";
      let msg
      let sig = "416a4f3ae75d686e3afe7c891408cdea71ddb7594e72963ad4ff3ffd1514b311b5155b6b98c6b9cbb2ff10fbb9874460fb8b827ae5d06fe48759dc435e80530e";
      const [r, s] = [sig.substring(0,64), sig.substring(64)];
      const result = await instance.verify(`0x${pub}`, `0x${r}`, `0x${s}`, `0x${msg}`);
      assert.equal(result, true)
    } catch (err){
      console.log({err})
      assert.fail('No revert expected:', err)
    }
  })

  it("should be able to verify second Corda ED25519 signature", async () => {
    try {
      let pub = "f96c7685492d03cf5c59750b1b85f7e40fca45e0b36a63da62516799e78b42b6";
      let msg
      let sig = "a6acec7f0473062f279391ec77ee86f6223ec6c5a947feca609af7218b65e2d49b8a40da8b2dcdf91098945b95695080667d4bab31c66fd1328bc0848a71b609";
      const [r, s] = [sig.substring(0,64), sig.substring(64)];
      const result = await instance.verify(`0x${pub}`, `0x${r}`, `0x${s}`, `0x${msg}`);
      assert.equal(result, true)
    } catch (err){
      console.log({err})
      assert.fail('No revert expected:', err)
    }
  })
})

