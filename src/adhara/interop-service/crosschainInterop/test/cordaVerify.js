const CordaTestbench = artifacts.require('CordaVerify');
const truffleAssert = require('truffle-assertions');

contract('Corda', async (accounts) => {
  let instance = null;
  let testData = [{
    id: "Multi-component Adhara proof",
    prefix: '636F726461010000',
    components: [
      // outputs

      // commands



      // notary

      // signers



    nonces: ['4987b5ff9cfb23749d8a5db19494e73a96614374e85e3b605d4c14bf964eb07f'],
    hashes: ['48c6e3aa215375af6e90d898b0488a6f223b236f6dcd7deca23ae3032d3e876d'],
    salt: '009DF11CDCBF5CFE7143345193629777FA2645CCB6757A53C7FAEF2A58E71E68',
    groupIndices: ['01', '02', '02', '02', '04', '06', '06', '06'],
    internalIndices: ['00', '00', '01', '02', '00', '00', '01', '02'],
    root: '4B208ABDA9583127E6D2C6CA8B816855A94499B5D72A2D633D650E17408F78D1',
    tradeId: '4fafda90',
    sender: 'Tz1QYXJ0eUIsIEw9TmV3IFlvcmssIEM9VVM=',
    receiver: 'Tz1QYXJ0eUEsIEw9TG9uZG9uLCBDPUdC',
    controlContract: '0x37bCb3CAc66F4d859a4eF77dcD97EEc146BBC425',
    sourceNetworkId: '0x03',
    holdAmount: '0x64', // 100.00;
    leaves: [
      '0xEE9879732AC8A420635B4B8C5C9C0DC0A054416CDB10E2783B281AA27E80E864',
      '0x48C6E3AA215375AF6E90D898B0488A6F223B236F6DCD7DECA23AE3032D3E876D',
      '0xCBCF35775A7B31FEC7F96605B6657C8CF7FCDA74EB53CBC4278CD1D9F7047D07',
      '0x749140DA6BA7A66B7F868A0ACFBA722F61DE5DBE394FF49989648881CB26FE07',
      '0xD6FD05B16D31E5326F3737575ED4394D330D8C41C3849532FD9DA250EA0FA0B1',
      '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
      '0x2126C3AB4A96AAF2C7F8749EC60895F5E94867538996B735E71CD2029378E70E',
      '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
      '0xF6F1AD0DF6EC70AEFE442FC904992AA461F297E5B668D99C1EEFA7BADDAA198F',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    witnesses: [
      '0xEE9879732AC8A420635B4B8C5C9C0DC0A054416CDB10E2783B281AA27E80E864',
      '0x749140DA6BA7A66B7F868A0ACFBA722F61DE5DBE394FF49989648881CB26FE07',
      '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
      '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
      '0xC7EE457A08A9EB0C6DD73AEAB55347156B4435FB1CDBAADC9C2D460371D38553',
    ],
    flags: ['0x03', '0x01', '0x01', '0x01', '0x00', '0x00', '0x00', '0x01'],
    values: [
      '0x48C6E3AA215375AF6E90D898B0488A6F223B236F6DCD7DECA23AE3032D3E876D',
      '0xCBCF35775A7B31FEC7F96605B6657C8CF7FCDA74EB53CBC4278CD1D9F7047D07',
      '0xD6FD05B16D31E5326F3737575ED4394D330D8C41C3849532FD9DA250EA0FA0B1',
      '0x2126C3AB4A96AAF2C7F8749EC60895F5E94867538996B735E71CD2029378E70E',
    ],
    signatures: [{
      by: '0xBFACA63031D419A51D7A7A87CC72BA43CC7586F16C8DA7721428EC3917821EA4',
      sigR: '0xE637F96E07EB6711EF25841D3A8EFFDB1A0D79E851B7EF659B53EEB55F910893',
      sigS: '0x0E42309E0B40B7F4643EEC3FA2E8FF997843B7DC206F93592E2B2E1D1C6A430D',
      sigV: '0x0000000000000000000000000000000000000000000000000000000000000000',
      meta: '0x0000000A000000044B208ABDA9583127E6D2C6CA8B816855A94499B5D72A2D633D650E17408F78D1',
    }, {
      by: '0x13F5FDBE490038D0E92AFCD60D3E0A58131A038C7BADCC0D40D1A846DC6FF7EA',
      sigR: '0x504E02711E1C921593AFE06DE09DAE614247541606AF317353508CFAB3825CC5',
      sigS: '0xA03DD6CD54CF918AF5B4F848D185DF5CFBF571FED7C1667E038893D980FFC001',
      sigV: '0x0000000000000000000000000000000000000000000000000000000000000000',
      meta: '0x0000000A000000044B208ABDA9583127E6D2C6CA8B816855A94499B5D72A2D633D650E17408F78D1',
    }, {
      by: '0xC4F22F99EF43209E8BD8BEF745CDC3705BC62EC8802376FA98D3B5EECBEB2E04',
      sigR: '0xBEA47F008DE21E52B9E0A6CD71877375C2EB217E81658D8C959CCA3497583B44',
      sigS: '0x39DE673C71542D3AA9BACC91F66AC624DAACE642379ED4C7956EB876ACC96100',
      sigV: '0x0000000000000000000000000000000000000000000000000000000000000000',
      meta: '0x0000000A00000004D7A317C2D5C1018A67BC06F7E3EA59C8D7129F9877D937D8B9FFB36A76C90A2D',
    }],
    handlers: [{
      fingerprint: 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      componentIndex: '0x00',
      describedSize: '0x08',
      describedType: 'String',
      describedPath: '0x06',
      solidityType: 'string',
      calldataPath: '0x00',
      parser: 'PathParser',
    }, {
      fingerprint: 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
      componentIndex: '0x01',
      describedSize: '0x06',
      describedType: 'String',
      describedPath: '0x00',
      solidityType: 'string',
      calldataPath: '0x01',
      parser: 'PartyParser',
    }, {
      fingerprint: 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
      componentIndex: '0x00',
      describedSize: '0x06',
      describedType: 'String',
      describedPath: '0x00',
      solidityType: 'string',
      calldataPath: '0x02',
      parser: 'PartyParser',
    }, {
      fingerprint: '',
      componentIndex: '0x00',
      describedSize: '0x00',
      describedType: '',
      describedPath: '0x00',
      solidityType: 'address',
      calldataPath: '0x03',
      parser: 'NoParser',
    }, {
      fingerprint: '',
      componentIndex: '0x00',
      describedSize: '0x00',
      describedType: '',
      describedPath: '0x00',
      solidityType: 'uint256',
      calldataPath: '0x04',
      parser: 'NoParser',
    }, {
      fingerprint: 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      componentIndex: '0x00',
      describedSize: '0x08',
      describedType: 'String',
      describedPath: '0x07',
      solidityType: 'uint256',
      calldataPath: '0x05',
      parser: 'PathParser',
    },
    ],
    handlersWithStruct: [{
      fingerprint: 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      componentIndex: '0x00',
      describedSize: '0x08',
      describedType: 'String',
      describedPath: '0x06',
      solidityType: 'string',
      calldataPath: '0x0000',
      parser: 'PathParser',
    }, {
      fingerprint: 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
      componentIndex: '0x01',
      describedSize: '0x06',
      describedType: 'String',
      describedPath: '0x00',
      solidityType: 'string',
      calldataPath: '0x0001',
      parser: 'PartyParser',
    }, {
      fingerprint: 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
      componentIndex: '0x00',
      describedSize: '0x06',
      describedType: 'String',
      describedPath: '0x00',
      solidityType: 'string',
      calldataPath: '0x0002',
      parser: 'PartyParser',
    }, {
      fingerprint: '',
      componentIndex: '0x00',
      describedSize: '0x00',
      describedType: '',
      describedPath: '0x00',
      solidityType: 'address',
      calldataPath: '0x01',
      parser: 'NoParser',
    }, {
      fingerprint: '',
      componentIndex: '0x00',
      describedSize: '0x00',
      describedType: '',
      describedPath: '0x00',
      solidityType: 'uint256',
      calldataPath: '0x02',
      parser: 'NoParser',
    }, {
      fingerprint: 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      componentIndex: '0x00',
      describedSize: '0x08',
      describedType: 'String',
      describedPath: '0x07',
      solidityType: 'uint256',
      calldataPath: '0x03',
      parser: 'PathParser',
    }],
    prototype: 'requestFollowLeg(string,string,string,address,uint256,uint256)',
    command: 'net.corda.samples.example.contracts.DCRContract$Commands$Earmark',
  }]
  let resultData = [
    ['4fafda90', 'Tz1QYXJ0eUIsIEw9TmV3IFlvcmssIEM9VVM=', 'Tz1QYXJ0eUEsIEw9TG9uZG9uLCBDPUdC', '', '', '100']
  ];

  beforeEach(async () => {
    instance = await CordaTestbench.new();
  });

  it('should be able to calculate the component hash', async () => {
    for (let i = 0; i < testData.length; i++) {
      let td = testData[i];
      const n = await instance.calculateNonce(`0x${td.groupIndices[0]}`, `0x${td.internalIndices[0]}`, `0x${td.salt}`);
      assert.equal(n, '0x' + td.nonces[0].toLowerCase());
      const h = await instance.calculateComponentHash(`0x${td.groupIndices[0]}`, `0x${td.internalIndices[0]}`, `0x${td.salt}`, `0x${td.components[0]}`);
      assert.equal(h, '0x' + td.hashes[0].toLowerCase());
    }
  });

  it('should be able to retrieve the proton graph from the buffer', async () => {
    for (let i = 0; i < testData.length; i++) {
      let td = testData[i];
      let rd = resultData[i];
      const functionPrototype = 'requestFollowLeg((string,string,string),address,uint256,uint256)';
      const functionSignature = web3.eth.abi.encodeFunctionSignature(functionPrototype);
      const functionParameters = web3.eth.abi.encodeParameters(
        [{ identifier: { tradeId: 'string', sender: 'string', receiver: 'string' } }, 'address', 'uint256', 'uint256'],
        [{ tradeId: td.tradeId, sender: td.sender, receiver: td.receiver }, td.controlContract, td.sourceNetworkId, td.holdAmount],
      );
      const callParameters = functionSignature + functionParameters.substring(2);
      const handlerData = web3.eth.abi.encodeParameters([ parameterHandlerStruct ],[ td.handlersWithStruct ])
      try {
        const result = await instance.extractByFingerprint(`0x${td.components[0]}`, callParameters, functionPrototype, handlerData);
        assert.equal(result.length, rd.length)
        for (let j = 0; j < result.length; j++) {
          assert.equal(result[j], rd[j]);
        }
      } catch (err) {
        console.log({err})
        assert.fail('No revert expected: ' + err)
      }
    }
  });

  it('should be able to find the matching calldata type token - case 1', async () => {
    const calldataTypeTokens = [
      'string',
      'string',
      'string',
      'address',
      'uint256',
      'uint256',
    ];
    let result = await instance.getMatchingTokenIndex(calldataTypeTokens, 0);
    assert.equal(result, 0, 'Expected correct index');
    result = await instance.getMatchingTokenIndex(calldataTypeTokens, 1);
    assert.equal(result, 1, 'Expected correct index');
    result = await instance.getMatchingTokenIndex(calldataTypeTokens, 2);
    assert.equal(result, 2, 'Expected correct index');
    result = await instance.getMatchingTokenIndex(calldataTypeTokens, 3);
    assert.equal(result, 3, 'Expected correct index');
    result = await instance.getMatchingTokenIndex(calldataTypeTokens, 4);
    assert.equal(result, 4, 'Expected correct index');
    result = await instance.getMatchingTokenIndex(calldataTypeTokens, 5);
    assert.equal(result, 5, 'Expected correct index');
  });

  it('should be able to find the matching calldata type token - case 2', async () => {
    const calldataTypeTokens = [
      '(string)',
      'string',
      'string',
      'address',
      'uint256',
      'uint256',
    ];
    const result = await instance.getMatchingTokenIndex(calldataTypeTokens, 0);
    assert.equal(result, 0, 'Expected correct index');
  });

  it('should be able to find the matching calldata type token - case 3', async () => {
    const calldataTypeTokens = [
      '(string',
      'string)',
      'string',
      'address',
      'uint256',
      'uint256',
    ];
    const result = await instance.getMatchingTokenIndex(calldataTypeTokens, 0);
    assert.equal(result, 1, 'Expected correct index');
  });

  it('should be able to find the matching calldata type token - case 4', async () => {
    const calldataTypeTokens = [
      '(string',
      'string',
      'string',
      'address',
      'uint256',
      'uint256)',
    ];
    const result = await instance.getMatchingTokenIndex(calldataTypeTokens, 0);
    assert.equal(result, 5, 'Expected correct index');
  });

  it('should be able to find the matching calldata type token - case 5', async () => {
    const calldataTypeTokens = [
      '((string)',
      'string',
      'string',
      'address',
      'uint256',
      'uint256)',
    ];
    const result = await instance.getMatchingTokenIndex(calldataTypeTokens, 0);
    assert.equal(result, 5, 'Expected correct index');
  });

  it('should be able to find the matching calldata type token - case 6', async () => {
    const calldataTypeTokens = [
      '((string)',
      'string',
      '(string)',
      'address',
      'uint256',
      'uint256)',
    ];
    const result = await instance.getMatchingTokenIndex(calldataTypeTokens, 0);
    assert.equal(result, 5, 'Expected correct index');
  });

  it('should be able to find the matching calldata type token - case 6', async () => {
    const calldataTypeTokens = [
      '((string',
      'string',
      '(string))',
      'address',
      'uint256)',
      'uint256',
    ];
    const result = await instance.getMatchingTokenIndex(calldataTypeTokens, 0);
    assert.equal(result, 4, 'Expected correct index');
  });

  it('should be able to find the matching calldata type token - case 7', async () => {
    const calldataTypeTokens = [
      'string',
      '((string',
      '(string))',
      'address',
      'uint256)',
      'uint256',
    ];
    const result = await instance.getMatchingTokenIndex(calldataTypeTokens, 1);
    assert.equal(result, 4, 'Expected correct index');
  });

  it('should NOT be able to find the matching calldata type token with too many closing brackets', async () => {
    const calldataTypeTokens = [
      'string',
      '((string',
      '(string))',
      'address',
      'uint256))',
      'uint256',
    ];
    await truffleAssert.reverts(
      instance.getMatchingTokenIndex(calldataTypeTokens, 1),
      'Calldata parameter types contains too many closing brackets.',
    );
  });

  it('should NOT be able to find the matching calldata type token with not enough closing brackets', async () => {
    const calldataTypeTokens = [
      'string',
      '((string',
      '(string)',
      'address',
      'uint256)',
      'uint256',
    ];
    await truffleAssert.reverts(
      instance.getMatchingTokenIndex(calldataTypeTokens, 1),
      'Calldata parameter types contains too many opening brackets.',
    );
  });

  it('should be able to extract top level types from function types - case 1', async () => {
    const calldataTypeTokens = [
      'string',
      'string',
      'string',
      'address',
      'uint256',
      'uint256',
    ];
    const result = await instance.getTopLevelTypes(calldataTypeTokens);
    assert.deepEqual(result, ['string', 'string', 'string', 'address', 'uint256', 'uint256'], 'Expected correct result');
  });

  it('should be able to extract top level types from function types - case 2', async () => {
    const calldataTypeTokens = [
      '(string)',
      'string',
      'string',
      'address',
      'uint256',
      'uint256',
    ];
    const result = await instance.getTopLevelTypes(calldataTypeTokens);
    assert.deepEqual(result, ['(string)', 'string', 'string', 'address', 'uint256', 'uint256'], 'Expected correct result');
  });

  it('should be able to extract top level types from function types - case 3', async () => {
    const calldataTypeTokens = [
      '((string)',
      'string',
      'string)',
      'address',
      'uint256',
      'uint256',
    ];
    const result = await instance.getTopLevelTypes(calldataTypeTokens);
    assert.deepEqual(result, ['((string),string,string)', 'address', 'uint256', 'uint256', '', ''], 'Expected correct result');
  });

  it('should be able to extract values from encoded parameters - case 1', async () => {
    for (let i = 0; i < testData.length; i++) {
      const td = testData[i];
      const rd = resultData[i];
      const functionPrototype = 'requestFollowLeg(string,string,string,address,uint256,uint256)';
      const functionSignature = web3.eth.abi.encodeFunctionSignature(functionPrototype);
      const functionParameters = web3.eth.abi.encodeParameters(
        ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
        [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount],
      );
      const handlerData = web3.eth.abi.encodeParameters(
        [
          {
            'ParameterHandler[]': {
              fingerprint: 'string',
              componentIndex: 'uint8',
              describedSize: 'uint8',
              describedType: 'string',
              describedPath: 'bytes',
              solidityType: 'string',
              calldataPath: 'bytes',
              parser: 'string',
            },
          },
        ],
        [
          td.handlers,
        ],
      );
      try {
        const callParameters = functionSignature + functionParameters.substring(2);
        const result = await instance.extractParameters(callParameters, functionPrototype, handlerData);
        assert.equal(result.length, rd.length)
        for (let j = 0; j < result.length; j++) {
          assert.equal(result[j], rd[j]);
        }
      } catch (err) {
        //console.log({ err });
        assert.fail('No revert expected: ' + err);
      }
    }
  });

  it('should be able to extract values from encoded parameters - case 2', async () => {
    for (let i = 0; i < testData.length; i++) {
      const td = testData[i];
      const rd = resultData[i];
      const functionPrototype = 'requestFollowLeg((string,string,string),address,uint256,uint256)';
      const functionSignature = web3.eth.abi.encodeFunctionSignature(functionPrototype);
      const functionParameters = web3.eth.abi.encodeParameters(
        [{ identifier: { tradeId: 'string', sender: 'string', receiver: 'string' } }, 'address', 'uint256', 'uint256'],
        [{ tradeId: td.tradeId, sender: td.sender, receiver: td.receiver }, td.controlContract, td.sourceNetworkId, td.holdAmount],
      );
      const handlerData = web3.eth.abi.encodeParameters(
        [
          {
            'ParameterHandler[]': {
              fingerprint: 'string',
              componentIndex: 'uint8',
              describedSize: 'uint8',
              describedType: 'string',
              describedPath: 'bytes',
              solidityType: 'string',
              calldataPath: 'bytes',
              parser: 'string',
            },
          },
        ],
        [
          td.handlersWithStruct,
        ],
      );
      try {
        const callParameters = functionSignature + functionParameters.substring(2);
        const result = await instance.extractParameters(callParameters, functionPrototype, handlerData);
        assert.equal(result.length, rd.length)
        for (let j = 0; j < result.length; j++) {
          assert.equal(result[j], rd[j]);
        }
      } catch (err) {
        //console.log({ err });
        assert.fail('No revert expected: ' + err);
      }
    }
  });

  it('should be able to extract public keys from notary component group', async () => {
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct],[
      {
        callParameters: '0x',
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x51E5C69FAF3380ABDA7ADCECE02177615F7AB5C1A4A0E1A44F6E84667C02B876',
        ComponentGroup: [{
          groupIndex: '0x04',
          internalIndex: '0x00',
          encodedBytes: '0x
        }]
      }
    ])
    try {
      const expected = ['3059301306072a8648ce3d020106082a8648ce3d0301070342000448a450e7a340c810034f36c6ce78197cbec20d123858813f7e27a881bddfdcfacf21a4115fa93cd9c9a6cceefcf548dd3cd4a0ee6caa7f57eb08ac23e54b6aac']
      const result = await instance.extractPublicKeys(eventData);
      assert.equal(result.length, expected.length)
      for (let l = 0; l < result.length; l++) {
        assert.equal(result[l], expected[l])
      }
    } catch (err) {
      //console.log({err})
      assert.fail('No revert expected: ' + err)
    }
  })

  it('should be able to extract public keys from signers component group', async () => {
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: '0x',
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x51E5C69FAF3380ABDA7ADCECE02177615F7AB5C1A4A0E1A44F6E84667C02B876',
        ComponentGroup: [{
          groupIndex: '0x06',
          internalIndex: '0x00',
          encodedBytes: '0x
        }]
      }
    ])
    try {
      const expected = [
        '302a300506032b6570032100031873061d16ce60f37a669297fc765dc335abf82fbbcbcbf6ed7371125313b9',
        '302a300506032b6570032100e289b3cb7a867e086ad0f7db191f07b60a6c856d99d73c54afc86b141303ac78',
        '302a300506032b65700321000235296a9025c6f77fc5f2103e7c757988149932130237ecdc905aa3c292a7c8']
      const result = await instance.extractPublicKeys(eventData);
      assert.equal(result.length, expected.length)
      for (let l = 0; l < result.length; l++) {
        assert.equal(expected[l], result[l]);
      }
    } catch (err) {
      //console.log({err})
      assert.fail('No revert expected: ' + err)
    }
  })

  it('should be able to extract commands from commands component group', async () => {
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: '0x',
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x51E5C69FAF3380ABDA7ADCECE02177615F7AB5C1A4A0E1A44F6E84667C02B876',
        ComponentGroup: [{
          groupIndex: '0x02',
          internalIndex: '0x00',
          encodedBytes: '0x
        }]
      }
    ])
    try {
      const expected = ['net.corda.samples.example.contracts.DCRContract$Commands$Earmark', 'net.corda.samples.example.contracts.DCRContract$Commands']
      const result = await instance.extractCommands(eventData);
      assert.equal(result.length, 4)
      for (let l = 0; l < result.length; l++) {
        assert.equal(expected.includes(result[l]), true)
      }
    } catch (err) {
      //console.log({err})
      assert.fail('No revert expected: ' + err)
    }
  })

  it('should be able to validate event data with all required components', async () => {
    for (let i = 0; i < testData.length; i++) {
      let td = testData[i];
      const ed = buildMultiComponentGroupData(td);
      try {
        const result = await instance.validateEvent(ed.eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData);
        assert.equal(result.receipt.status, true)
      } catch (err) {
        //console.log({err})
        assert.fail('No revert expected: ' + err)
      }
    }
  })

  it('should NOT be able to validate event data with reduced components', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (i != 2 && i != 3 && i != 6 && i != 7)
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Component hash=[eb61087598708914419937c9e84c9a4d595b18ca3966a125c071fca2d6b3ba1b] with one child was not found in merkle multi-valued proof with root=[4b208abda9583127e6d2c6ca8b816855a94499b5d72a2d633d650e17408f78d1].',
    );
  })

  it('should NOT be able to validate event data with missing components', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (i != 3)
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Component hash=[a69b8e4274c71e68afc796f49e21f2204a2ee18a6ab53a5e18e172ece872b2a5] with multiple children was not found in merkle multi-valued proof with root=[4b208abda9583127e6d2c6ca8b816855a94499b5d72a2d633d650e17408f78d1].',
    );
  })

  it('should NOT be able to validate event data with corrupted components', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      componentGroups.push({
        groupIndex: '0x' + td.groupIndices[i],
        internalIndex: '0x' + td.internalIndices[i],
        encodedBytes: '0x' + td.components[(i+1)%td.groupIndices.length],
      });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Failed to convert parsed object at index=[0] with selector=[00000000] into object with selector=[97fc4627].',
    );
  })

  it('should NOT be able to validate event data with incorrect call parameters', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.receiver, td.sender, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      componentGroups.push({
        groupIndex: '0x' + td.groupIndices[i],
        internalIndex: '0x' + td.internalIndices[i],
        encodedBytes: '0x' + td.components[i],
      });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [{
      callParameters: callParameters,
      hashAlgorithm: 'SHA-256',
      privacySalt: '0x' + td.salt,
      ComponentGroup: componentGroups
    }])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Parsed object at index=[1] with selector=[97fc4627] is not equal to given object with selector=[97fc4627].',
    );
  })

  it('should NOT be able to validate event data with corrupt call parameters', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + '005851303439516d4675617a51734945395650554a68626d73304948526c633352755a5851794c434250505568525445463449464d75595335794c6d77754c43424d5055783165475674596d3931636d637349454d395446553d0000000000000000000000000000000000000000000000000000000000000000000000000000005851303439516d4675617a4d734945395650554a68626d737a4948526c633352755a5851794c434250505568525445463449464d75595335794c6d77754c43424d5055783165475674596d3931636d637349454d395446553d0000000000000000';
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      componentGroups.push({
        groupIndex: '0x' + td.groupIndices[i],
        internalIndex: '0x' + td.internalIndices[i],
        encodedBytes: '0x' + td.components[i],
      });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [{
      callParameters: callParameters,
      hashAlgorithm: 'SHA-256',
      privacySalt: '0x' + td.salt,
      ComponentGroup: componentGroups
    }])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      ' ', // Unable to catch a revert reason here when abi.decode fails but transaction should fail
    );
  })

  it('should NOT be able to validate event data with missing outputs component group', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: [
          {
            groupIndex: '0x' + td.groupIndices[1],
            internalIndex: '0x' + td.internalIndices[1],
            encodedBytes: '0x' + td.components[1],
          },
          {
            groupIndex: '0x' + td.groupIndices[2],
            internalIndex: '0x' + td.internalIndices[2],
            encodedBytes: '0x' + td.components[2],
          },
          {
            groupIndex: '0x' + td.groupIndices[3],
            internalIndex: '0x' + td.internalIndices[3],
            encodedBytes: '0x' + td.components[3],
          }]
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Required outputs is not present in the proof, expected at least one outputs group.',
    );
  })

  it('should NOT be able to validate event data with missing commands group', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (i != 1 && i != 2 && i != 3)
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Required command is not present in the proof, expected command=[net.corda.samples.example.contracts.DCRContract$Commands$Earmark].',
    );
  })

  it('should NOT be able to validate event data with missing signers group', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (i != 5 && i != 6 && i != 7)
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Required signers is not present in the proof, expected at least one signers group.',
    );
  })

  it('should NOT be able to validate event data with missing notary group', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (i != 4)
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Required notary is not present in the proof, expected one notary group.',
    );
  })

  it('should NOT be able to validate event data with incorrect component group index', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: [
          {
            groupIndex: '0x32',
            internalIndex: '0x' + td.internalIndices[1],
            encodedBytes: '0x' + td.components[1],
          },
          {
            groupIndex: '0x' + td.groupIndices[2],
            internalIndex: '0x' + td.internalIndices[2],
            encodedBytes: '0x' + td.components[2],
          },
          {
            groupIndex: '0x' + td.groupIndices[3],
            internalIndex: '0x' + td.internalIndices[3],
            encodedBytes: '0x' + td.components[3],
          }]
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Event data contains unknown component group with index=[50].',
    );
  })

  it('should NOT be able to validate event data with non-matching function prototype', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (td.groupIndices[i] !== '01') {
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
      }
    }
    componentGroups.push({
      groupIndex: '0x01',
      internalIndex: '0x00',
      encodedBytes: '0x0080C562000000000001D00000019D0000000300A3226E65742E636F7264613A676832485254534451566C4E5570486F2B58374F33673D3D450080C562000000000002D00000015700000001D00000014E000000020080C562000000000005C0AE05A14E636F6D2E68716C61782E636F72646170702E7374617465732E636F6E74726163742E7472616E73616374696F6E2E6463722E4561726D61726B466F724C656E64696E6724436F6D6D616E6454616740C02701A1246E65742E636F7264612E636F72652E636F6E7472616374732E436F6D6D616E64446174610080C562000000000003C02602A3226E65742E636F7264613A676832485254534451566C4E5570486F2B58374F33673D3D40450080C562000000000005C08405A1246E65742E636F7264612E636F72652E636F6E7472616374732E436F6D6D616E644461746140C02701A1246E65742E636F7264612E636F72652E636F6E7472616374732E436F6D6D616E64446174610080C562000000000003C02602A3226E65742E636F7264613A66713652502F6633746A44686F6A30597836697041673D3D40450080C562000000000009C10100'
    })
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Failed to convert parsed object at index=[0] with selector=[00000000] into object with selector=[97fc4627]',
    );
  })

  it('should NOT be able to validate event data with non-matching command', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (td.groupIndices[i] !== '02') {
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
      }
    }
    componentGroups.push({
      groupIndex: '0x02',
      internalIndex: '0x00',
      encodedBytes: '0x
    })
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Required command is not present in the proof, expected command=['+td.command+'].',
    );
  })

  it('should NOT be able to validate event data with incorrect command group', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (i !== 1 && i !== 3 && i !== 6 && i !== 7)
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
    }
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Required command is not present in the proof, expected command=[net.corda.samples.example.contracts.DCRContract$Commands$Earmark].',
    );
  })

  it('should NOT be able to validate event data with non-matching notary', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (td.groupIndices[i] !== '04') {
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
      }
    }
    componentGroups.push({
      groupIndex: '0x04',
      internalIndex: '0x00',
      encodedBytes: '0x
    })
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'The required notary signature is not present in the proof.',
    );
  })

  it('should NOT be able to validate event data with non-matching signatures', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const componentGroups = [];
    for (let i = 0; i < td.groupIndices.length; i++) {
      if (td.groupIndices[i] !== '06') {
        componentGroups.push({
          groupIndex: '0x' + td.groupIndices[i],
          internalIndex: '0x' + td.internalIndices[i],
          encodedBytes: '0x' + td.components[i],
        });
      }
    }
    componentGroups.push({
      groupIndex: '0x06',
      internalIndex: '0x00',
      encodedBytes: '0x
    })
    const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [
      {
        callParameters: callParameters,
        hashAlgorithm: 'SHA-256',
        privacySalt: '0x' + td.salt,
        ComponentGroup: componentGroups
      }
    ])
    await truffleAssert.reverts(
      instance.validateEvent(eventData, td.prototype, ed.handlerData, td.command, ed.proofData, ed.signatureData),
      'Some participant signatures are missing, expected to find=[3] signatures.',
    );
  })

  it('should NOT be able to validate event data with incorrect merkle root in proof', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    const proofData = web3.eth.abi.encodeParameters([proofDataStruct], [{
      root: '0xA67EFD4978C92742BD7A9522D8E56D879C4C7F06917416DA0B9E103D58C2CD00',
      witnesses: td.witnesses,
      flags: td.flags,
      values: td.values
    }])
    await truffleAssert.reverts(
      instance.validateEvent(ed.eventData, td.prototype, ed.handlerData, td.command, proofData, ed.signatureData),
      'Failed to verify merkle multi-valued proof with root=[a67efd4978c92742bd7a9522d8e56d879c4c7f06917416da0b9e103d58c2cd00].',
    );
  })

  it('should NOT be able to validate event data with incorrect merkle root in meta', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
    const functionParameters = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
    )
    const callParameters = functionSignature + functionParameters.substring(2);
    td.signatures[0].meta = '0x0000000C000000044B208ABDA9583127E6D2C6CA8B816855A94499B5D72A2D633D650E17408F78D2'
    const signatureData = web3.eth.abi.encodeParameters([signatureDataStruct], [td.signatures])
    await truffleAssert.reverts(
      instance.validateEvent(ed.eventData, td.prototype, ed.handlerData, td.command, ed.proofData, signatureData),
      'Failed to verify included merkle leaf with root=[4b208abda9583127e6d2c6ca8b816855a94499b5d72a2d633d650e17408f78d2].',
    );
  })

  it('should NOT be able to validate event data with incorrect merkle proof', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const proofData = web3.eth.abi.encodeParameters([proofDataStruct], [{
      root: '0xA67EFD4978C92742BD7A9522D8E56D879C4C7F06917416DA0B9E103D58C2CD64',
      witnesses:  [
        '0xCB358A381DADCDE67CD1F7B3FBF74C4EE19667D6598435054F35B0BEB7462D5A',
        '0x41ACC4D55048F755B4D00507C3D644818A1883C3C88953F504D393E0188AE5E3',
        '0x1070EB0467FC98A179D7738B0589AD8823623883ABB6C36F5BEDD8935B97BAAC',
        '0xA78ADC56E8B4B27763F3A1A8F967F33C4E5BD4EB0DD322D05B3C21FFB775FC2F',
        '0x48199D291F37958056D5F7FE2AA9D32065A54D9ACD76E02385A29C7E9C1DDFF9',
      ],
      flags: ['0x03', '0x01', '0x01', '0x01', '0x00', '0x00', '0x00', '0x01'],
      values:  [
        '0xF2FC082373D97E2D0C1D77B614DD5CD5D394D259A7502E7FE356D4CF89167C12',
        '0x282DD224D277809EF7F14F745235931D069305A8AF903838385D02D045D2C963',
        '0x7EA4B32DFDDF992EE967D4EB18FDAF7AC994B7EF61AD5AD4B207E2C5932CD953',
        '0x020DFDBB6F64A2F303FF98B96C294757BD151AAE4F7089B4019F61BA31C49406',
      ]
    }])
    await truffleAssert.reverts(
      instance.validateEvent(ed.eventData, td.prototype, ed.handlerData, td.command, proofData, ed.signatureData),
      'Component hash=[48c6e3aa215375af6e90d898b0488a6f223b236f6dcd7deca23ae3032d3e876d] with one child was not found in merkle multi-valued proof with root=[a67efd4978c92742bd7a9522d8e56d879c4c7f06917416da0b9e103d58c2cd64].',
    );
  })

  it('should NOT be able to validate event data with corrupt merkle proof', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const witnesses = td.witnesses.slice(1)
    const flags = td.flags.slice(1)
    const proofData = web3.eth.abi.encodeParameters([proofDataStruct], [{
      root: '0x' + td.root,
      witnesses: witnesses,
      flags: flags,
      values: td.values
    }])
    await truffleAssert.reverts(
      instance.validateEvent(ed.eventData, td.prototype, ed.handlerData, td.command, proofData, ed.signatureData),
      'Failed to verify merkle multi-valued proof with root=[4b208abda9583127e6d2c6ca8b816855a94499b5d72a2d633d650e17408f78d1].',
    );
  })

  it('should NOT be able to validate event data with wrong parser configuration', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const handlers = td.handlers;
    handlers[0] = {
      fingerprint: 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      componentIndex: '0x00',
      describedSize: '0x08',
      describedType: 'String',
      describedPath: '0x06',
      solidityType: 'string',
      calldataPath: '0x00',
      parser: 'XParser',
    }
    const handlerData = web3.eth.abi.encodeParameters([parameterHandlerStruct], [handlers])
    await truffleAssert.reverts(
      instance.validateEvent(ed.eventData, td.prototype, handlerData, td.command, ed.proofData, ed.signatureData),
      'Unable to parse parameter. Parameter handler has unknown parser id=[0000000000000000000000000000000000000000000000000000000071b50dcd].',
    );
  })

  it('should NOT be able to validate event data with wrong described size', async () => {
    const td = testData[0]
    const ed = buildMultiComponentGroupData(td);
    const handlers = td.handlers;
    handlers[0] = {
      fingerprint: 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      componentIndex: '0x00',
      describedSize: '0x06',
      describedType: 'String',
      describedPath: '0x06',
      solidityType: 'string',
      calldataPath: '0x00',
      parser: 'PathParser',
    }
    const handlerData = web3.eth.abi.encodeParameters([parameterHandlerStruct], [handlers])
    await truffleAssert.reverts(
      instance.validateEvent(ed.eventData, td.prototype, handlerData, td.command, ed.proofData, ed.signatureData),
      'Unexpected size when parsing parameter with selector = [64b05bf6]. Got [8], expected [6].',
    );
  })
})

function buildMultiComponentGroupData(td) {
  const functionSignature = web3.eth.abi.encodeFunctionSignature(td.prototype);
  const functionParameters = web3.eth.abi.encodeParameters(
    ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
    [td.tradeId, td.sender, td.receiver, td.controlContract, td.sourceNetworkId, td.holdAmount]
  )
  const callParameters = functionSignature + functionParameters.substring(2);
  const componentGroups = [];
  for (let i = 0; i < td.groupIndices.length; i++) {
    componentGroups.push({
      groupIndex: '0x' + td.groupIndices[i],
      internalIndex: '0x' + td.internalIndices[i],
      encodedBytes: '0x' + td.components[i],
    });
  }
  const eventData = web3.eth.abi.encodeParameters([eventDataStruct], [{
    callParameters: callParameters,
    hashAlgorithm: 'SHA-256',
    privacySalt: '0x' + td.salt,
    ComponentGroup: componentGroups
  }])
  const proofData = web3.eth.abi.encodeParameters([proofDataStruct], [{
    root: '0x' + td.root,
    witnesses: td.witnesses,
    flags: td.flags,
    values: td.values
  }])
  const signatureData = web3.eth.abi.encodeParameters([signatureDataStruct], [td.signatures])
  const handlerData = web3.eth.abi.encodeParameters([parameterHandlerStruct], [td.handlers])
  return {
    handlerData: handlerData,
    eventData: eventData,
    proofData: proofData,
    signatureData: signatureData
  }
}

const eventDataStruct = {
  EventData: {
    callParameters: 'bytes',      // Parameters of the function we want to call through the interop service.
    hashAlgorithm: 'string',      // Hash algorithm used in the Merkle tree. Only SHA-256 is currently supported.
    privacySalt: 'bytes32',       // Salt needed to compute a Merkle tree leaf.
    'ComponentGroup[]': {
      groupIndex: 'uint8',
      internalIndex: 'uint8',
      encodedBytes: 'bytes',      // Hash of this component becomes the value we want to proof Merkle tree membership of.
    },
  },
}

const proofDataStruct = {
  ProofData: {
    root: 'bytes32',
    witnesses: 'bytes32[]',
    flags: 'uint8[]',
    values: 'bytes32[]',
  },
}

const signatureDataStruct = {
  'Signature[]': {
    by: 'uint256',
    sigR: 'uint256',
    sigS: 'uint256',
    sigV: 'uint256',
    meta: 'bytes',
  }
}

const parameterHandlerStruct = {
  'ParameterHandler[]': {
    fingerprint: 'string',
    componentIndex: 'uint8',
    describedSize: 'uint8',
    describedType: 'string',
    describedPath: 'bytes',
    solidityType: 'string',
    calldataPath: 'bytes',
    parser: 'string',
  },
}
