const Ethereum = artifacts.require("EthereumVerify");
const ta = require('truffle-assertions');

contract("Ethereum", async accounts => {
  let instance = null

  const testData = {
    eventLogs: '0xf903e4018401eac6fabf902d8f8b994d920222bc1741461a651c6c3af456660a66e618ae1a0f0e25c63981e9a617375c8244c8ac144e4e520acc2cb08e2d4c3781b1a02c067b8800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004039306464333835316539363932313963613733316139656263656364643065363930393434643062646633393461613238663537353639393362316661636464f9021a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a07a752c4d100a96be23f60f072fed1f33da2890fbe45eb15af52750faa2772a92b901e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc425000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001448903901f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000000104532452d7474766c373874773975377700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b485447424742303047425000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    blockHash: '0x789874e5aeb303c1f73b49223cd3f1d1c78178eed36ee62bbf3c9ca4684294d8',
    receiptsRoot: '0xbebb5a604846804f1c5c9db1728eff0999b777e278e50431fab206e1a9e5d29e',
    witnesses: '0xf903f0f903ed822080b903e7f903e4018401eac6fabf902d8f8b994d920222bc1741461a651c6c3af456660a66e618ae1a0f0e25c63981e9a617375c8244c8ac144e4e520acc2cb08e2d4c3781b1a02c067b8800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004039306464333835316539363932313963613733316139656263656364643065363930393434643062646633393461613238663537353639393362316661636464f9021a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a07a752c4d100a96be23f60f072fed1f33da2890fbe45eb15af52750faa2772a92b901e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc425000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001448903901f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000000104532452d7474766c373874773975377700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b485447424742303047425000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    rlpBlockHeader: '0xf90220a0949f74633f9dee323b510e7e307a7b1ea0cd12b68682a33979ff018cb11f5626a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0dfb06d6c0723d9b4013c14fd8c07f8b0e6db4175c29c8f04b1b4f4320f7ce548a0250c7960f1714e97d0c0283609722b5d251ef3ccb11daecebe98a6f0e4a59a63a0bebb5a604846804f1c5c9db1728eff0999b777e278e50431fab206e1a9e5d29ebe8405f5e1008401eac6fa8466040e26a5e4a00000000000000000000000000000000000000000000000000000000000000000c0c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000',
    rlpBlockHeaderPreimage: '0xf90221a0949f74633f9dee323b510e7e307a7b1ea0cd12b68682a33979ff018cb11f5626a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0dfb06d6c0723d9b4013c14fd8c07f8b0e6db4175c29c8f04b1b4f4320f7ce548a0250c7960f1714e97d0c0283609722b5d251ef3ccb11daecebe98a6f0e4a59a63a0bebb5a604846804f1c5c9db1728eff0999b777e278e50431fab206e1a9e5d29ebe8405f5e1008401eac6fa8466040e26a6e5a00000000000000000000000000000000000000000000000000000000000000000c0c080c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000',
    rlpValidatorSignatures: '0xf843b841a27e8dc683cf2dd4c2c56d4ba6a1bc2a0a2c53e4099f07860c8a6394e560295c0df732ff957c1b5e8dfef7e8c91fdc1bc06ba2d8746555a24039db75d0025c7901',
    networkId: '3',
    contractAddress: '0x37bCb3CAc66F4d859a4eF77dcD97EEc146BBC425',
    callParameters: '0x8903901f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000000000000000000000000000000000000000000104532452d7474766c373874773975377700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030474250000000000000000000000000000000000000000000',
    sourceHash: '0x30fbdf0aaa4658881d56dffd85f240e570d9cb4e480203fdea178d7d3b1d6e65'
  }

  beforeEach(async () => {
    instance = await Ethereum.new()
  })

  it("should be able to verifyEVMEvent", async () => {
    const eventData = {
      index: '0x01',
      signature: web3.utils.soliditySha3('CrossBlockchainCallExecuted(uint256,address,bytes)'),
      logs: testData.eventLogs
    }
    const result = await instance.verifyEVMEvent(eventData, testData.receiptsRoot, testData.witnesses);
    assert.equal(result, true);
  })

  it("should be able to verifyBFTBlockHeader with block header validator selection", async () => {
    let testData = { // QBFT Block header validator selection
      blockHash:                          '0xd10ec91e84ef400f1a0f248c6563bdec5d0e98fb493419218a59efafe15329b7',
      rlpEncodedBlockHeader:              '0xf90236a0b7f9c1d334b61668799fa00bec7fc23514c031df594b1e0db75ac0838dd8e559a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0557396809edb3fa9b8b60f1ea9288b216ea1edfeb56e2fe4381dbc6e2e831f55a028c14b5507676a07c732ebe020704e9f0d5cf331dc65662a9460bbae06504ac9a0df914c01812b825c0ce905eb06990bb61ac6699a6e5e7c291b215bf8737142e2ba68405f5e100830a8bc08464994141b83bf839a00000000000000000000000000000000000000000000000000000000000000000d594ca31306798b41bc81c43094a1e0462890ce7a673c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000',
      rlpEncodedBlockHeaderPreImage:      '0xf90237a0b7f9c1d334b61668799fa00bec7fc23514c031df594b1e0db75ac0838dd8e559a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0557396809edb3fa9b8b60f1ea9288b216ea1edfeb56e2fe4381dbc6e2e831f55a028c14b5507676a07c732ebe020704e9f0d5cf331dc65662a9460bbae06504ac9a0df914c01812b825c0ce905eb06990bb61ac6699a6e5e7c291b215bf8737142e2ba68405f5e100830a8bc08464994141b83cf83aa00000000000000000000000000000000000000000000000000000000000000000d594ca31306798b41bc81c43094a1e0462890ce7a673c080c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000',
      rlpValidatorSignatures:             '0xf843b841a33acd31b2917e95de43c257b152be28fbbf1564848c8fcc765d3562d7b8420b1df3a07a235ed8dfab0a1f2cff66b12456dc4fc16f6cf6e89a8c4d85db887e2e00',
      blockNumber:                        '422',
      receiptsRoot:                       '0xdf914c01812b825c0ce905eb06990bb61ac6699a6e5e7c291b215bf8737142e2',
    };
    const result = await instance.verifyBFTBlockHeader(testData.blockHash, testData.rlpEncodedBlockHeader, testData.rlpEncodedBlockHeaderPreImage)
    assert.equal(result.blockNumber.toString(), testData.blockNumber)
    assert.equal(result.receiptsRoot.toString(), testData.receiptsRoot)

  })

  it("should be able to verifyBFTBlockHeader with contract validator selection", async () => {
    let testData = { // QBFT Contract validator selection
      blockHash:                          '0xf51b0be4d7434a4d5ca7cbb9801cd88f71c08c1e3ce463e6547ff38aee84c9a9',
      rlpEncodedBlockHeader:              '0xf9021fa048ea1e0e2bc652a31f709559a0d46bd424cb07f184a41cc53d5c2f3056fe5d0fa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0eeee286cf03765bd3365e0b9915999225a4ce26ec5d09824170c159ddbebe82ea031a5fe7e7e7c96bb504d07eb5414a57193647635d7364e73b52f6a4a08c5a474a078050f3b89ccff8df8addbc53b9360bf7c2740c7cf206336fe7d945de8308da5bb08405f5e100830ec43084649947d8a5e4a00000000000000000000000000000000000000000000000000000000000000000c0c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000',
      rlpEncodedBlockHeaderPreImage:      '0xf90220a048ea1e0e2bc652a31f709559a0d46bd424cb07f184a41cc53d5c2f3056fe5d0fa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0eeee286cf03765bd3365e0b9915999225a4ce26ec5d09824170c159ddbebe82ea031a5fe7e7e7c96bb504d07eb5414a57193647635d7364e73b52f6a4a08c5a474a078050f3b89ccff8df8addbc53b9360bf7c2740c7cf206336fe7d945de8308da5bb08405f5e100830ec43084649947d8a6e5a00000000000000000000000000000000000000000000000000000000000000000c0c080c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000',
      rlpValidatorSignatures:             '0xf843b8419867a2792b31131108136c24bec5dc59fc0134a17a825fc63ec9eb2f1a218b8300fcb1039a7564d7e6e321ac47f2a768e1abbf5852602e872dc39394eb9ddb7b01',
      blockNumber:                        '432',
      receiptsRoot:                       '0x78050f3b89ccff8df8addbc53b9360bf7c2740c7cf206336fe7d945de8308da5',
    };
    const result = await instance.verifyBFTBlockHeader(testData.blockHash, testData.rlpEncodedBlockHeader, testData.rlpEncodedBlockHeaderPreImage)
    assert.equal(result.blockNumber.toString(), testData.blockNumber)
    assert.equal(result.receiptsRoot.toString(), testData.receiptsRoot)
  })

  it("should not be able to verifyBFTBlockHeader with no blockHash", async () => {
    await ta.reverts(instance.verifyBFTBlockHeader('0x', testData.rlpBlockHeader, testData.rlpBlockHeaderPreimage), "Calculated block hash doesn't match passed in block hash");
  })

  it("should not be able to verifyBFTBlockHeader with wrong header", async () => {
    await ta.reverts(instance.verifyBFTBlockHeader(testData.blockHash, '0xf9021fa048ea1e0e2bc652a31f709559a0d46bd424cb07f184a41cc53d5c2f3056fe5d0fa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0eeee286cf03765bd3365e0b9915999225a4ce26ec5d09824170c159ddbebe82ea031a5fe7e7e7c96bb504d07eb5414a57193647635d7364e73b52f6a4a08c5a474a078050f3b89ccff8df8addbc53b9360bf7c2740c7cf206336fe7d945de8308da5bb08405f5e100830ec43084649947d8a5e4a00000000000000000000000000000000000000000000000000000000000000000c0c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000', testData.rlpBlockHeaderPreimage), "Part 1 in headers does not match");
  })

  it("should not be able to verifyBFTBlockHeader with wrong preimage", async () => {
    await ta.reverts(instance.verifyBFTBlockHeader(testData.blockHash, testData.rlpBlockHeader, '0xf90220a048ea1e0e2bc652a31f709559a0d46bd424cb07f184a41cc53d5c2f30'), "Array accessed at an out-of-bounds or negative index");
  })
})
