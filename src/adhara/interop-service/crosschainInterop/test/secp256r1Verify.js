const SECP256R1Verify = artifacts.require("SECP256R1Verify");
const ecKey = require('ec-key');
const createHash = require("create-hash");

contract("SECP256R1Verify", async accounts => {

  let instance = null;
  let messageHash;
  let message;
  let publicKey;
  let parity;
  let signature;

  beforeEach(async () => {
    instance = await SECP256R1Verify.new()

    let msg = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);
    let buf = Buffer.from(msg, 'utf8')
    message = '0x' + buf.toString('hex');
    // Generate key
    let priKey = ecKey.createECKey('prime256v1');
    let pubKey = priKey.asPublicECKey();
    publicKey = [
      '0x' + pubKey.x.toString('hex'),
      '0x' + pubKey.y.toString('hex')
    ];
    let asInt = BigInt(publicKey[1])
    let yBit = ((asInt >> 0n) & 1n) | 2n
    parity = '0x0'+ yBit.toString(16)
    let sigString = priKey.createSign('SHA256').update(msg).sign('hex').toString('hex');
    // Reformat signature / extract coordinates.
    let xlength = 2 * ('0x' + sigString.slice(6, 8));
    sigString = sigString.slice(8);
    let r = '0x' + sigString.slice(0, xlength)
    r = r.replace(/^(0x)0+((\w{4})+)$/, "$1$2")
    let s = '0x' + sigString.slice(xlength + 4)
    s = s.replace(/^(0x)0+((\w{4})+)$/, "$1$2")
    signature = [r, s];
  })

  it('confirm valid signature (#1)', async () =>  {
    let result = await instance.verify(publicKey[0], signature[0], signature[1], parity, message);
    assert.equal(result, true);
  });

  it('confirm valid signature (#2)', async () =>  {
    let result = await instance.verify(publicKey[0], signature[0], signature[1], parity, message);
    assert.equal(result, true);
  });

  it('confirm valid signature (#3)', async () =>  {
    let result = await instance.verify(publicKey[0], signature[0], signature[1], parity, message);
    assert.equal(result, true);
  });

  it('confirm valid signature (#4)', async () =>  {
    let data = '0x
    let by = '0x48A450E7A340C810034F36C6CE78197CBEC20D123858813F7E27A881BDDFDCFA'
    let sigR = '0x963880C86872D7B986CA608F61A8ECC1E9A5F84EDCE93AA6D64BD1B3A568B687'
    let sigS = '0xC29CFB0F105318F884E858DF5AC8043C402F45ABF9ABF08BDCAE414FD14D8990'
    let sigV = '0x02'
    let result = await instance.verify(by, sigR, sigS, sigV, data);
    assert.equal(result, true);
  });

  it('confirm valid signature (#5)', async () =>  {
    let data = '0x
    let by = '0x48A450E7A340C810034F36C6CE78197CBEC20D123858813F7E27A881BDDFDCFA'
    let sigR = '0xED1FB3E9662181EFBDC1203ABBF781C663ED078D9F975A40D3E214A5ED1FAC68'
    let sigS = '0x805F0C5A77271133AAE179CE9AC121BDC6B42DD257DE57B346BE41BFF79E0F24'
    let sigV = '0x02'
    let result = await instance.verify(by, sigR, sigS, sigV, data);
    assert.equal(result, true);
  });

  it('reject signature with flipped public key coordinates ([x,y] >> [y,x])', async () =>  {
    let flippedPublicKey = [publicKey[1], publicKey[0]];
    let result = await instance.verifySignature(flippedPublicKey, signature, message);
    assert.equal(result, false);
  });

  it('reject signature with flipped signature values ([r,s] >> [s,r])', async () =>  {
    let flippedSignature = [signature[1], signature[0]];
    let result = await instance.verifySignature(publicKey, flippedSignature, message);
    assert.equal(result, false);
  });

  it('reject signature with invalid message hash', async () =>  {
    let invalidMsg = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);
    let imBuf = Buffer.from(invalidMsg, 'utf8')
    let imHash = createHash('sha256').update(imBuf).digest()
    let imHashHex = imHash.toString('hex')
    let invalidMessage = '0x' + imBuf.toString('hex');
    let result = await instance.verifySignature(publicKey, signature, invalidMessage);
    assert.equal(result, false);
  });
})
