const config = require('../config/config.json')
const { GetProof } = require('eth-proof')
const truffleAssert = require('truffle-assertions');
const ethers = require("ethers");
const ethJsUtil = require("ethereumjs-util");
const CrosschainFunctionCall = artifacts.require('CrosschainFunctionCall');
const CrosschainMessaging = artifacts.require('CrosschainMessaging');
const XvP = artifacts.require('XvP');
const Token = artifacts.require('Token');

const Logger = require('../src/CrosschainSDKUtils/logger.js')
const logger = Logger(config, {})
const crosschainMessagingSDK = require('../src/CrosschainMessagingSDK')(config, { logger })

const random = function() { return Math.floor(Math.random()*(999-100+1)+100) }
let pay = null, ptc = null, pfc = null, pmc = null;
let fc = 0, sc = 1, lc = 2;

function sleep(ms) { return new Promise((resolve) => { setTimeout(resolve, ms); }); }

contract('CrosschainFunctionCall', async accounts => {
  let web3ProviderUrl = web3.currentProvider.host
  if (!web3ProviderUrl) {
    web3ProviderUrl = 'http://127.0.0.1:8545'
  }

  beforeEach(async () => {
    pay = await XvP.new(); // Payment
    ptc = await Token.new(); // Payment token contract
    pmc = await CrosschainMessaging.new(); // Payment messaging contract
    pfc = await CrosschainFunctionCall.new(); // Payment function call contract
    let result = null;
    // Payment notaries
    result = await pay.setTokenContractAddress(ptc.address)
    assert.equal(result.receipt.status, true)
    result = await ptc.addHoldNotary('N-123', pay.address)
    assert.equal(result.receipt.status, true)
    result = await pay.setNotaryId('N-123')
    assert.equal(result.receipt.status, true)
    // Payment interop
    result = await pfc.setMessagingContractAddress(pmc.address)
    assert.equal(result.receipt.status, true)
    result = await pay.setFunctionCallContractAddress(pfc.address)
    assert.equal(result.receipt.status, true)
    // Payment schemes
    const firstDecodingScheme = await pfc.CordaTransactionDecodingSchemeId()
    result = await pfc.onboardEventDecodingScheme(fc, firstDecodingScheme)
    assert.equal(result.receipt.status, true)
    const firstProvingScheme = await pmc.CordaTransactionProvingSchemeId()
    result = await pmc.onboardProvingScheme(fc, firstProvingScheme)
    assert.equal(result.receipt.status, true)
    result = await pmc.addParticipant(fc, '0xCC346BA45F2A5A624BD08A4CE329B9EE16A54F629A4D509A4BCF13713E05E2A8')
    assert.equal(result.receipt.status, true)
    result = await pmc.addParticipant(fc, '0xBEC8BAB726B1E66CABDAC271146BE6DFBD9E2E7FC308658CB258185128904596')
    assert.equal(result.receipt.status, true)
    result = await pmc.addNotary(fc, '0xC3E4FBA595B1D08C7709A3152E17E866243E07889F416134A58B589F3A9AEBB0')
    assert.equal(result.receipt.status, true)
    const functionPrototype = 'requestFollowLeg(string,string,string,address,uint256,uint256)'
    const functionSignature = web3.eth.abi.encodeFunctionSignature(functionPrototype);
    const functionCommand = 'net.corda.samples.example.contracts.DCRContract$Commands$Earmark'
    result = await pmc.setParameterHandlers(fc, functionSignature, functionPrototype, functionCommand, [{
      fingerprint: 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      componentIndex: '0x00',
      describedSize: '0x08',
      describedType: 'String',
      describedPath: '0x06',
      solidityType: 'string',
      calldataPath: '0x00',
      parser: 'PathParser',
    }, {
      fingerprint: 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
      componentIndex: '0x01',
      describedSize: '0x06',
      describedType: 'String',
      describedPath: '0x00',
      solidityType: 'string',
      calldataPath: '0x01',
      parser: 'PartyParser',
    }, {
      fingerprint: 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
      componentIndex: '0x00',
      describedSize: '0x06',
      describedType: 'String',
      describedPath: '0x00',
      solidityType: 'string',
      calldataPath: '0x02',
      parser: 'PartyParser',
    }, {
      fingerprint: '',
      componentIndex: '0x00',
      describedSize: '0x00',
      describedType: '',
      describedPath: '0x00',
      solidityType: 'address',
      calldataPath: '0x03',
      parser: 'NoParser',
    }, {
      fingerprint: '',
      componentIndex: '0x00',
      describedSize: '0x00',
      describedType: '',
      describedPath: '0x00',
      solidityType: 'uint256',
      calldataPath: '0x04',
      parser: 'NoParser',
    }, {
      fingerprint: 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      componentIndex: '0x00',
      describedSize: '0x08',
      describedType: 'String',
      describedPath: '0x07',
      solidityType: 'uint256',
      calldataPath: '0x05',
      parser: 'PathParser',
    },
    ]);
    assert.equal(result.receipt.status, true)
    const secondDecodingScheme = await pfc.EthereumEventLogDecodingSchemeId();
    result = await pfc.onboardEventDecodingScheme(sc, secondDecodingScheme)
    assert.equal(result.receipt.status, true)
    const secondProvingScheme = await pmc.EthereumBlockHeaderProvingSchemeId();
    result = await pmc.onboardProvingScheme(sc, secondProvingScheme)
    assert.equal(result.receipt.status, true)

    result = await pfc.setLocalNetworkId(lc)
    assert.equal(result.receipt.status, true)

    const bmd = ({ // Mint details
      operationId: 'M-'+random(),
      toAccount: 'Bob',
      amount: 10000000,
      metaData: ''
    })
    let bmint = await ptc.create(bmd.operationId, bmd.toAccount, bmd.amount, bmd.metaData)
    assert.equal(bmint.receipt.status, true)

    const validatorList = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    if (!validatorList || validatorList.length === 0){
      return Promise.reject(Error("Could not get list of validators, or list is empty"))
    }
    await pmc.setValidatorList(sc, 5, validatorList)
  })

  it('should be able to handle inbound call with Ethereum event attestation proof to request the follow leg', async () => {
    const requestFollowLeg = ({
      functionName: 'requestFollowLeg',
      params: {
        tradeId: 'cd544666',
        sender: 'HTUSUS00GBP',
        receiver: 'HTGBGB00GBP',
        contractAddress: '0x37bCb3CAc66F4d859a4eF77dcD97EEc146BBC425',
        networkId: 1
      },
      inbound: {
        networkId: 1,
        encodedInfo: '0x0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000008369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e250000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000038bf903880183012b0fbf9027df9027a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a08369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e25b902400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ac3a5e96e4a09b6613273aca6649f453f9425712000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001b8c6755b7c00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc4250000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000086364353434363636000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000137bcb3cac66f4d859a4ef77dcd97eec146bbc4250000000000000000000000000000000000000000000000000000000000',
        encodedProof: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000009e0000000000000000000000000000000000000000000000000000000000000008044df6d8d93d24c69295d5a2620b5d315179572ecd12ff7bb84644494f557001bfc3c2e2ecb0568f284431ea35253402e58dcd59f0dc7e69f0051f2482491101b00000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000397f90394f90391822080b9038bf903880183012b0fbf9027df9027a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a08369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e25b902400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ac3a5e96e4a09b6613273aca6649f453f9425712000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001b8c6755b7c00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc4250000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000086364353434363636000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000137bcb3cac66f4d859a4ef77dcd97eec146bbc425000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000222f9021fa096eb92b77f3d03660d9a99ba5f65b66e58ef85a36f69d3a79ee78cdbd00ef2e5a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a00db5ee996a5e07669a8e692d591d652789716eacaba9bc487945eec1d8a662e5a0cb1c545dd659cc65632c02c106aecd47f9a033346835245fbbe6fd3c51f741cea044df6d8d93d24c69295d5a2620b5d315179572ecd12ff7bb84644494f557001bbf5e10083012b0f8466543118a5e4a00000000000000000000000000000000000000000000000000000000000000000c0c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e63658800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000223f90220a096eb92b77f3d03660d9a99ba5f65b66e58ef85a36f69d3a79ee78cdbd00ef2e5a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a00db5ee996a5e07669a8e692d591d652789716eacaba9bc487945eec1d8a662e5a0cb1c545dd659cc65632c02c106aecd47f9a033346835245fbbe6fd3c51f741cea044df6d8d93d24c69295d5a2620b5d315179572ecd12ff7bb84644494f557001bbf5e10083012b0f8466543118a6e5a00000000000000000000000000000000000000000000000000000000000000000c0c080c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ca31306798b41bc81c43094a1e0462890ce7a673e05ad0d5333e614a0e6e052acda18d95d5cbef21825aab2d43cef85b5d7b5faf4f39211f86739030124b47e89b1059970cf454d9f959ef3d292897d1914020b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000',
      }
    });
    try {
      let result = await pfc.inboundCall(requestFollowLeg.inbound.networkId, requestFollowLeg.inbound.encodedInfo, requestFollowLeg.inbound.encodedProof)
      assert.equal(result.receipt.status, true)
    } catch (err) {
      console.log({err})
      assert.fail('No revert expected:\n' + err)
    }
  });

  it('should be able to handle inbound call with Ethereum event attestation proof to perform cancellation', async () => {
    const performCancellation = ({
      functionName: 'performCancellation',
      params: {
        tradeId: 'ccf47007',
        sender: 'HTUSUS00USD',
        receiver: 'HTGBGB00USD',
        contractAddress: '0xac3a5E96E4a09b6613273aca6649f453f9425712', // XvP contract
        networkId: 1,
      },
      inbound : {
        networkId: 1,
        encodedInfo: '0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000008369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e250000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000032bf903280183015fe0bf9021df9021a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a08369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e25b901e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ac3a5e96e4a09b6613273aca6649f453f942571200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000158ca2f0452000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000086363663437303037000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000137bcb3cac66f4d859a4ef77dcd97eec146bbc4250000000000000000000000000000000000000000000000000000000000',
        encodedProof: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000009800000000000000000000000000000000000000000000000000000000000000080a790c94f10578492d58551272300d193cdff4a11bffca41611ac997f9c6f3a8aeffca71a1de21846e78622899d8d4da89bd5e2e1452207423bfb00dbe534810f00000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000337f90334f90331822080b9032bf903280183015fe0bf9021df9021a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a08369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e25b901e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ac3a5e96e4a09b6613273aca6649f453f942571200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000158ca2f0452000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000086363663437303037000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000137bcb3cac66f4d859a4ef77dcd97eec146bbc425000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000222f9021fa03e4ea4328977e39770e47379eb4963584cf11504ab11f6d87c7e09c0d51f409da01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a09d4106e13018c23a82d41c70d2eb1274a468ddb906e72bf5028f08e4530973cea0cffe996df07bd59cb4af6e4763913db53c2bf80e2c4b607d19c25ab74afad231a0a790c94f10578492d58551272300d193cdff4a11bffca41611ac997f9c6f3a8abb48405f5e10083015fe08466543133a5e4a00000000000000000000000000000000000000000000000000000000000000000c0c080a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e63658800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000223f90220a03e4ea4328977e39770e47379eb4963584cf11504ab11f6d87c7e09c0d51f409da01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a09d4106e13018c23a82d41c70d2eb1274a468ddb906e72bf5028f08e4530973cea0cffe996df07bd59cb4af6e4763913db53c2bf80e2c4b607d19c25ab74afad231a0a790c94f10578492d58551272300d193cdff4a11bffca41611ac997f9c6f3a8ab9010000000000000008200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000018207b48405f5e10083015fe08466543133a6e5a00000000000000000000000000000000000000000000000000000000000000000c0c080c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000ca31306798b41bc81c43094a1e0462890ce7a673094162afbaa246e91612497dd844aea00cb6c4482da1d959a1acae60977c16e70ab35d3db960799db96ff8049dee81b4de5f3d7cfd957412f19a1c0edd71142a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000',
      },
    });
    try {
      let result = await pfc.inboundCall(performCancellation.inbound.networkId, performCancellation.inbound.encodedInfo, performCancellation.inbound.encodedProof)
      assert.equal(result.receipt.status, true)
    } catch (err) {
      console.log({err})
      assert.fail('No revert expected:\n' + err)
    }
  })

  it('should be able to perform call from remote chain with Ethereum proof and correct destination network', async () => {
    const block =
    {
      "number": 337,
      "hash": "0xc72f215fad3e220fee27365feee228bb3d4fa2881b9f19575beec7bef593911b",
      "mixHash": "0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365",
      "parentHash": "0x1fe899b9d02edf188135b2e507e017263439bdd92ea6e047ff59e274052e9b74",
      "nonce": "0x0000000000000000",
      "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      "logsBloom": "0x
      "transactionsRoot": "0xf5f6787903aababbd264f11506b9bb5dfe620ff0ef09f46d15410be9f585e784",
      "stateRoot": "0x042ca334897bec3c41037bcdf28bd80b2ccb0942f41aaf13fd0a49f04f1be84d",
      "receiptsRoot": "0x05f6390f08a2051740fd5111ed20b7a801c5165dad4c054419c500d926ac4593",
      "miner": "0xCA31306798B41BC81C43094a1E0462890Ce7a673",
      "difficulty": "1",
      "totalDifficulty": "338",
      "extraData": "0xf869a00000000000000000000000000000000000000000000000000000000000000000c0c080f843b84112bbfc183d4e7ba6b57c201428259bc1c70bc0ea61a1ff042bcae540efd312db7af94263b85accc76a4c10e73de5e7e5c4d0e73acb72882bb06aee0ef0d6b9fb01",
      "size": 1180,
      "gasLimit": 100000000,
      "gasUsed": 76559,
      "timestamp": 1716815903,
      "uncles": [],
      "transactions": [
        "0x164b3eb39015516f4a097a7b12fbf5780d4267b0260f08c24b8ba4264e205230"
      ]
    }
    const txProof = {
      "path": "0x0",
      "rlpEncodedReceipt": "0xf903880183012b0fbf9027df9027a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a08369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e25b902400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ac3a5e96e4a09b6613273aca6649f453f9425712000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001b8c6755b7c00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc4250000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000086230643764663863000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000137bcb3cac66f4d859a4ef77dcd97eec146bbc4250000000000000000",
      "witness": "0xf90394f90391822080b9038bf903880183012b0fbf9027df9027a94764b29d5b807fe725b2607007b230a1eb53bfca9e1a08369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e25b902400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ac3a5e96e4a09b6613273aca6649f453f9425712000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001b8c6755b7c00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc4250000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000086230643764663863000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854555355533030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030474250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000137bcb3cac66f4d859a4ef77dcd97eec146bbc4250000000000000000"
    }
    // Performing call from remote chain [bc-local-gbp] on chain [bc-local-usd] with context [{"tradeId":"b0d7df8c","functionName":"requestFollowLeg"}]
    const blockHeaderObj = crosschainMessagingSDK.getBlockHeaderObjFromBlock('qbft', block)
    let validatorSignatures = ethers.utils.RLP.decode(blockHeaderObj.rlpValidatorSignatures)
    const signatures = []
    for (let i = 0; i < validatorSignatures.length; i++) {
      let res = ethJsUtil.fromRpcSig(validatorSignatures[i])
      let publicKey = ethJsUtil.ecrecover(ethJsUtil.toBuffer(ethers.utils.keccak256(blockHeaderObj.rlpBlockHeaderPreimage)), res.v, res.r, res.s);
      let address = ethJsUtil.pubToAddress(publicKey).toString("hex");
      let signature = {
        by: '0x'+address,
        sigR: '0x'+ res.r.toString('hex'),
        sigS: '0x' + res.s.toString('hex'),
        sigV: '0x000000000000000000000000000000000000000000000000000000000000000'+(res.v-27),
        meta: '0x'
      }
      signatures.push(signature);
    }
    const eventData = web3.eth.abi.encodeParameters([ ethEventDataStruct ], [
      {
        index: 0x0,
        signature: web3.utils.soliditySha3('RemoteFunctionCall(uint256,address,bytes)'),
        logs: txProof.rlpEncodedReceipt
      }
    ])
    const blockHeaderMeta = web3.eth.abi.encodeParameters([ ethBlockHeaderMetaStruct ], [
      {
        rlpBlockHeader: blockHeaderObj.rlpBlockHeaderExcludingSeals,
        rlpBlockHeaderPreimage: blockHeaderObj.rlpBlockHeaderPreimage
      }
    ])
    const encodedInfo = web3.eth.abi.encodeParameters(['uint256', 'address', 'bytes'], [0, '0x0000000000000000000000000000000000000000', eventData])
    const encodedProof = web3.eth.abi.encodeParameters([ ethEncodedProofStruct ], [
      {
        typ: 0,
        ProofData: {
          witnesses: txProof.witness,
          root: block.receiptsRoot,
          blockHash: block.hash,
          blockHeaderMeta: blockHeaderMeta,
        },
        Signature: signatures
      }
    ])
    // Perform remote call via proof
    const result = await pfc.inboundCall(sc, encodedInfo, encodedProof, {gas: 20000000})
    assert.equal(result.receipt.status, true)
  })

  it('should NOT be able to perform call from remote chain with Ethereum proof and incorrect destination network', async () => {
    // Creating proof of startCancellation from tradeId [a5e1bcd5] from network [2] in order to performCancellation on network [1]
    const block = {
      "number": 351,
      "hash": "0x83aa326c20839f73063e7dbb6c22f67f0bc8e29deedb7af9a3076b50c5ea7a90",
      "mixHash": "0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365",
      "parentHash": "0xf0daf025a40d6e6e8ef95753444bdb8e87de74db97e935e50f98335e2c981647",
      "nonce": "0x0000000000000000",
      "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
      "logsBloom": "0x
      "transactionsRoot": "0xcaf82637164559e61c1048a5421e9bc9925919df50e5526a27a95f34a0057bee",
      "stateRoot": "0x1fa03c76489550c6dda38efeda6fc132c3413db36f56e44330e6ec5562e83d43",
      "receiptsRoot": "0x9843d85360c55b6f560c5c93dbcc025a6b34e9778ddb256e1af8d77c3a9d3d68",
      "miner": "0xCA31306798B41BC81C43094a1E0462890Ce7a673",
      "difficulty": "1",
      "totalDifficulty": "352",
      "extraData": "0xf869a00000000000000000000000000000000000000000000000000000000000000000c0c080f843b8416c0dd69440747db895d04b43d24a9d7ccb6476f0a6581d0c42dc9a8987b8d4a44dea8c2dc03fdccafd6335bc26dcbb4f848a8830fdf53297a2e915067893aeb600",
      "size": 1116,
      "gasLimit": 100000000,
      "gasUsed": 90080,
      "timestamp": 1716815917,
      "uncles": [],
      "transactions": [
        "0xda9188a477451e71f2a7cc1ac5fe4fdb0065b12dab8e937e36de5d2769fd0acf"
      ]
    }
    const txProof = {
      "path": "0x0",
      "rlpEncodedReceipt": "0xf903280183015fe0b9010000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000008000000000000000000000000000000000000f9021df9021a94c13141df25ac03eb6e249ab4319f61d2be3d4254e1a08369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e25b901e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc42500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000158ca2f0452000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000086135653162636435000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030555344000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b48545553555330305553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ac3a5e96e4a09b6613273aca6649f453f94257120000000000000000",
      "witness": "0xf90334f90331822080b9032bf903280183015fe0bf9021df9021a94c13141df25ac03eb6e249ab4319f61d2be3d4254e1a08369ab70f92dced90f80b7c18870fbacd98e2d8d35666f4b0a99008ce06c1e25b901e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000037bcb3cac66f4d859a4ef77dcd97eec146bbc42500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000158ca2f0452000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000086135653162636435000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4854474247423030555344000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b48545553555330305553440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ac3a5e96e4a09b6613273aca6649f453f94257120000000000000000"
    }
    const blockHeaderObj = crosschainMessagingSDK.getBlockHeaderObjFromBlock('qbft', block)
    let validatorSignatures = ethers.utils.RLP.decode(blockHeaderObj.rlpValidatorSignatures)
    const signatures = []
    for (let i = 0; i < validatorSignatures.length; i++) {
      let res = ethJsUtil.fromRpcSig(validatorSignatures[i])
      let publicKey = ethJsUtil.ecrecover(ethJsUtil.toBuffer(ethers.utils.keccak256(blockHeaderObj.rlpBlockHeaderPreimage)), res.v, res.r, res.s);
      let address = ethJsUtil.pubToAddress(publicKey).toString("hex");
      let signature = {
        by: '0x'+address,
        sigR: '0x'+ res.r.toString('hex'),
        sigS: '0x' + res.s.toString('hex'),
        sigV: '0x000000000000000000000000000000000000000000000000000000000000000'+(res.v-27),
        meta: '0x'
      }
      signatures.push(signature);
    }
    const eventData = web3.eth.abi.encodeParameters([ ethEventDataStruct ], [
      {
        index: 0,
        signature: web3.utils.soliditySha3('RemoteFunctionCall(uint256,address,bytes)'),
        logs: txProof.rlpEncodedReceipt
      }
    ])
    const blockHeaderMeta = web3.eth.abi.encodeParameters([ ethBlockHeaderMetaStruct ], [
      {
        rlpBlockHeader: blockHeaderObj.rlpBlockHeaderExcludingSeals,
        rlpBlockHeaderPreimage: blockHeaderObj.rlpBlockHeaderPreimage
      }
    ])
    const encodedInfo = web3.eth.abi.encodeParameters(['uint256', 'address', 'bytes'], [0, '0x0000000000000000000000000000000000000000', eventData])
    const encodedProof = web3.eth.abi.encodeParameters([ ethEncodedProofStruct ], [
      {
        typ: 0,
        ProofData: {
          witnesses: txProof.witness,
          root: block.receiptsRoot,
          blockHash: block.hash,
          blockHeaderMeta: blockHeaderMeta,
        },
        Signature: signatures
      }
    ])
    // Perform remote call via proof
    await truffleAssert.reverts(
      pfc.inboundCall(sc, encodedInfo, encodedProof, {gas: 20000000}),
      'Local network [2] is not the destination network [1] for this message'
    );
  })

  it('should be able to perform call from remote chain with Corda proof', async () => {
    const testData = {
      receiver: 'Tz1QYXJ0eUEsIEw9TG9uZG9uLCBDPUdC',
      sender: 'Tz1QYXJ0eUIsIEw9TmV3IFlvcmssIEM9VVM=',
      controlContract: '0x37bCb3CAc66F4d859a4eF77dcD97EEc146BBC425',
      sourceNetworkId: '0x04',
      holdAmount: '0x64', // 100;
      tradeId: '428b9b72',
      eventSig: '0x0000000000000000000000000000000000000000000000000000000000000000',
      componentGroups: [
        '0x
        '0x
        '0x
        '0x
      ],
      groupIndices: ['0x01', '0x02', '0x04', '0x06'],
      internalIndices: ['0x00', '0x00', '0x00', '0x00'],
      hashAlgorithm: 'SHA-256',
      privacySalt: '0x905C948FA235C269B3FB2B140F8CBCB4B84F82BDF9840FF8355F5EB6473AC794',
      root: '0xB1026A0228065225F379DA6411B51D52DD32B4CF05CBA1B7C64DCA8BB687BBDE',
      witnesses: [
        '0x80466B53A07ED5550C8312C7A47403C035B1BB5F62D61E4D49A2311456BA1889',
        '0x10A9B1E151F6983EC96F97C2B14A8F87EA7DDB3F58B98CC9075FEE7116EA9A98',
        '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
        '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF',
        '0x0A723C8A94414175E053AC997E0666D9D394FB0C2316320D1144FD2E2069FE3B',
      ],
      flags: ['0x03', '0x01', '0x01', '0x01', '0x00', '0x00', '0x00', '0x01'],
      values: [
        '0x7BDEF26F15BBF8533F08F9ECF945E3F926A50C8740ED32B6E0A7FD5822986A51',
        '0xB33F1B532EDEAD42FA1696A9EF0B176024F954CB90B917124AD55B14B3989C1F',
        '0x5988BAF41E28308AE86CFC529EE576E15FEE35EE4B692E475D5610AD34881CEE',
        '0x6D641EB2561A4D5B33BCC1256AB405B3E2311FA7B3B731FD35B5EFC3A1995D02',
      ],
      signatures: [{
        by: '0xCC346BA45F2A5A624BD08A4CE329B9EE16A54F629A4D509A4BCF13713E05E2A8',
        sigR: '0x9F2892F1459DB77FAB6A0D708CD02CC847FF485EBD465A27A8A53A3DCB18EE6E',
        sigS: '0x7A5EF5E1C6163D3B970C1E2A36DFB9B5B0620688FA6B47B1620E36E4C4520E0F',
        sigV: '0x0000000000000000000000000000000000000000000000000000000000000000',
        meta: '0x0000000A00000004B1026A0228065225F379DA6411B51D52DD32B4CF05CBA1B7C64DCA8BB687BBDE',
      }, {
        by: '0xBEC8BAB726B1E66CABDAC271146BE6DFBD9E2E7FC308658CB258185128904596',
        sigR: '0xD43C5298EAD3AC520FA6A7006279B9DE784935085C8BDC1C73451EF5A41E2120',
        sigS: '0x8EAFDE830E68EF3806BEA842AC0BDEDA95A3A5E771A070BD622AEE96FEBE9301',
        sigV: '0x0000000000000000000000000000000000000000000000000000000000000000',
        meta: '0x0000000A00000004B1026A0228065225F379DA6411B51D52DD32B4CF05CBA1B7C64DCA8BB687BBDE',
      }, {
        by: '0xC3E4FBA595B1D08C7709A3152E17E866243E07889F416134A58B589F3A9AEBB0',
        sigR: '0x8CF62B2433931BBD4D7A34CA8CAD589EA524D637B229661734DAFED141954731',
        sigS: '0x4C9A356B541889EC050CB58E82879FE80CC4DB4FB8780AC89A98A27715310E07',
        sigV: '0x0000000000000000000000000000000000000000000000000000000000000000',
        meta: '0x0000000A00000004289AD953C456DCE42E8DD374431A3704082BF03730CDCDEA7F2C948F9E5CD9D8',
      }],
    };

    const fromAccount = 'Bob'
    const toAccount = 'Alice'
    const operationId = web3.utils.soliditySha3({type: 'string', value: testData.tradeId}, fromAccount, toAccount).substring(2)

    const hd = ({ // Hold details
      operationId,
      fromAccount,
      toAccount,
      notaryId: 'N-123',
      amount: 1000000,
      duration: 0,
      metaData: ''
    });
    let result = await ptc.createHold(hd.operationId, hd.fromAccount, hd.toAccount, hd.notaryId, hd.amount, hd.duration, hd.metaData);
    assert.equal(result.receipt.status, true)
    result = await pay.setRemoteAccountIdToLocalAccountId(hd.fromAccount, testData.sender)
    assert.equal(result.receipt.status, true)
    result = await pay.setRemoteAccountIdToLocalAccountId(hd.toAccount, testData.receiver)
    assert.equal(result.receipt.status, true)
    const td = ({ // Trade details
      tradeId: testData.tradeId,
      sender: fromAccount,
      receiver: toAccount,
      amount: testData.holdAmount
    });
    let hold = await pay.getHold(td, ptc.address)
    let check = await pay.checkHold(hold, td, ptc.address)
    assert.equal(check.receipt.status, true)
    const eventSig = web3.eth.abi.encodeFunctionSignature('requestFollowLeg(string,string,string,address,uint256,uint256)');
    let callData = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, testData.sender, testData.receiver, pay.address, fc, td.amount]
    )
    callData = eventSig + callData.slice(2);
    const componentGroups = [];
    for (let i = 0; i < testData.groupIndices.length; i++) {
      componentGroups.push({
        groupIndex: testData.groupIndices[i],
        internalIndex: testData.internalIndices[i],
        encodedBytes: testData.componentGroups[i],
      });
    }
    const eventData = web3.eth.abi.encodeParameters([ cordaEventDataStruct ],
      [
        {
          'callParameters': callData,
          'hashAlgorithm': testData.hashAlgorithm,
          'privacySalt': testData.privacySalt,
          'ComponentData': componentGroups
        }
      ]
    )
    let encodedInfo = web3.eth.abi.encodeParameters(
      ['uint256', 'address', 'bytes'],
      [lc, pay.address, eventData]
    )
    let encodedProof = web3.eth.abi.encodeParameters([ cordaEncodedProofStruct ],
      [
        {
          typ: 0,
          ProofData: {
            root: testData.root,
            witnesses: testData.witnesses,
            flags: testData.flags,
            values: testData.values,
          },
          Signature: testData.signatures,
        }
      ]
    )
    try {
      result = await pfc.inboundCall(fc, encodedInfo, encodedProof)
      assert.equal(result.receipt.status, true)
      //console.log('Gas used to perform call from remote chain: ' + result.receipt.gasUsed)
    } catch (err) {
      console.log({err})
      assert.fail('No revert expected:\n' + err)
    }
    let found = false;
    for (let log of result.receipt.logs) {
      if (log.event === 'CrosschainFunctionCall')
        found = true;
    }
    assert.equal(found, true)
    try {
      await truffleAssert.reverts(
        pay.checkHold(hd, td, ptc.address),
        'Hold does not exist'
      );
    } catch (err){
      //console.log({err})
    }
  })

  it('should be able to emit an CrosschainFunctionCall event', async () => {
    let result = await pfc.outboundCall(fc, '0xE903048bBb91310cE915ce08b40e79BFF13A78f0', '0x123')
    assert.equal(result.receipt.status, true)
    let found = false;
    for(let log of result.receipt.logs) {
      if (log.event === 'CrosschainFunctionCall')
        found = true;
    }
    assert.equal(found, true)
  })

})

const ethEventDataStruct = {
  EventData: {
    index: 'uint256',
    signature: 'bytes32',
    logs: 'bytes',
  },
}

const ethBlockHeaderMetaStruct = {
  BlockHeaderMeta: {
    rlpBlockHeader: 'bytes',
    rlpBlockHeaderPreimage: 'bytes'
  }
}

const ethEncodedProofStruct = {
  Proof: {
    typ: 'uint256',
    ProofData: {
      witnesses: 'bytes',
      root: 'bytes32',
      blockHash: 'bytes32',
      blockHeaderMeta: 'bytes',
    },
    'Signature[]': {
      by: 'uint256',
      sigR: 'uint256',
      sigS: 'uint256',
      sigV: 'uint256',
      meta: 'bytes',
    }
  }
}

const cordaEventDataStruct = {
  EventData: {
    callParameters: 'bytes',
    hashAlgorithm: 'string',
    privacySalt: 'bytes32',
    'ComponentData[]': {
      groupIndex: 'uint8',
      internalIndex: 'uint8',
      encodedBytes: 'bytes',
    },
  },
}

const cordaEncodedProofStruct = {
  Proof: {
    typ: 'uint256',
    ProofData: {
      root: 'bytes32',
      witnesses: 'bytes32[]',
      flags: 'uint8[]',
      values: 'bytes32[]',
    },
    'Signature[]': {
      by: 'uint256',
      sigR: 'uint256',
      sigS: 'uint256',
      sigV: 'uint256',
      meta: 'bytes',
    }
  }
}
