const { GetProof } = require('eth-proof')
const ta = require('truffle-assertions');
const {v4: uuidv4} = require("uuid");
const Logger = require('../src/CrosschainSDKUtils/logger.js')
const opId = function () { return uuidv4().substring(0,16) }

const CrosschainFunctionCall = artifacts.require('CrosschainFunctionCall');
const CrosschainMessaging = artifacts.require('CrosschainMessaging');
const XvP = artifacts.require('XvP');
const Token = artifacts.require('Token');
const config = { logLevel: 'silent' }

const logger = Logger(config, {})
const crosschainMessagingSDK = require('../src/CrosschainMessagingSDK')(config, { logger })

const random = function() { return Math.floor(Math.random()*(999-100+1)+100) }
let pay = null, ptc = null, pfc = null, pmc = null;
let fc = 0, sc = 1;

function sleep(ms) { return new Promise((resolve) => { setTimeout(resolve, ms); }); }

contract('CrosschainFunctionCall', async accounts => {
  let web3ProviderUrl = web3.currentProvider.host
  if (!web3ProviderUrl) {
    web3ProviderUrl = 'http://127.0.0.1:8545'
  }
  const ethProof = new GetProof(web3ProviderUrl)

  beforeEach(async () => {
    pay = await XvP.new(); // Payment
    ptc = await Token.new(); // Payment token contract
    pmc = await CrosschainMessaging.new(); // Payment messaging contract
    pfc = await CrosschainFunctionCall.new(); // Payment function call contract
    let result = null;
    // Payment notaries
    result = await pay.setTokenContractAddress(ptc.address)
    assert.equal(result.receipt.status, true)
    result = await ptc.addHoldNotary('N-123', pay.address)
    assert.equal(result.receipt.status, true)
    result = await pay.setNotaryId('N-123')
    assert.equal(result.receipt.status, true)
    // Payment interop
    result = await pfc.setMessagingContractAddress(pmc.address)
    assert.equal(result.receipt.status, true)
    result = await pay.setFunctionCallContractAddress(pfc.address)
    assert.equal(result.receipt.status, true)
    // Payment schemes
    const firstDecodingScheme = await pfc.CordaTransactionDecodingSchemeId();
    result = await pfc.onboardEventDecodingScheme(fc, firstDecodingScheme)
    assert.equal(result.receipt.status, true)
    const firstProvingScheme = await pmc.CordaTransactionProvingSchemeId();
    result = await pmc.onboardProvingScheme(fc, firstProvingScheme)
    assert.equal(result.receipt.status, true)
    result = await pmc.addParticipant(fc, '0x04473F5846E9C090BC82D80C3B0F01E7058E21684C1967D71D3A338120A32B4C');
    assert.equal(result.receipt.status, true)
    result = await pmc.addParticipant(fc, '0x2E7F70B8A6499C1DE28DF983A882E057BF8AEECE0F677E402B6A128A615B3D11');
    assert.equal(result.receipt.status, true)
    result = await pmc.addNotary(fc, '0xC98D06DEEFF77BAA9339C709818F3AB9313740EE39CC6193E341C687DFA38CF4');
    assert.equal(result.receipt.status, true)
    result = await pmc.setParameterHandlers(fc, "0xc6755b7c", [{
      'fingerprint': 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      'componentIndex': '0x00',
      'describedSize': '0x08',
      'describedType': 'String',
      'describedPath': '0x06',
      'solidityType': 'string',
      'parser': 'PathParser',
    }, {
      'fingerprint': 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
      'componentIndex': '0x01',
      'describedSize': '0x06',
      'describedType': 'String',
      'describedPath': '0x00',
      'solidityType': 'string',
      'parser': 'PartyParser',
    }, {
      'fingerprint': 'net.corda:ngdwbt6kRT0l5nn16uf87A==',
      'componentIndex': '0x00',
      'describedSize': '0x06',
      'describedType': 'String',
      'describedPath': '0x00',
      'solidityType': 'string',
      'parser': 'PartyParser',
    }, {
      'fingerprint': '',
      'componentIndex': '0x00',
      'describedSize': '0x00',
      'describedType': '',
      'describedPath': '0x00',
      'solidityType': 'address',
      'parser': 'NoParser',
    }, {
      'fingerprint': '',
      'componentIndex': '0x00',
      'describedSize': '0x00',
      'describedType': '',
      'describedPath': '0x00',
      'solidityType': 'uint256',
      'parser': 'NoParser',
    }, {
      'fingerprint': 'net.corda:DldW9yS4tBOze6qv6U4QTA==',
      'componentIndex': '0x00',
      'describedSize': '0x08',
      'describedType': 'String',
      'describedPath': '0x07',
      'solidityType': 'uint256',
      'parser': 'PathParser',
    }]);
    assert.equal(result.receipt.status, true)
    const secondDecodingScheme = await pfc.EthereumEventLogDecodingSchemeId();
    result = await pfc.onboardEventDecodingScheme(sc, secondDecodingScheme)
    assert.equal(result.receipt.status, true)
    const secondProvingScheme = await pmc.EthereumBlockHeaderProvingSchemeId();
    result = await pmc.onboardProvingScheme(sc, secondProvingScheme)
    assert.equal(result.receipt.status, true)

    const bmd = ({ // Mint details
      operationId: 'M-'+random(),
      toAccount: 'Bob',
      amount: 10000000,
      metaData: ''
    })
    let bmint = await ptc.create(bmd.operationId, bmd.toAccount, bmd.amount, bmd.metaData)
    assert.equal(bmint.receipt.status, true)

    const validatorList = ['0xca31306798b41bc81c43094a1e0462890ce7a673']
    if (!validatorList || validatorList.length === 0){
      return Promise.reject(Error("Could not get list of validators, or list is empty"))
    }
    await pmc.setValidatorList(sc, opId(), validatorList)
  })

  it('should be able to start remote validator update with block header when using block header validation selection', async () => {
    const block = await web3.eth.getBlock('latest')
    const blockHeader = crosschainMessagingSDK.getBlockHeaderObjFromBlock('ibft', block)
    const validators = crosschainMessagingSDK.decodeValidatorAddresses(block)
    let bvsBlockHeader = '0x' + blockHeader.rlpBlockHeaderExcludingRound.toString('hex') // RLP-encoded block header with no round number
    let cvsContractAddress = '0x0000000000000000000000000000000000000000'   // Address of validator set management contract
    let destinationContract = '0xc23cdfef6ec7b1b39c6cb898d7acc71437f167bd'  // Contains the foreign ledger messaging contract address
    let destinationBlockchainId = 2 // Contains the foreign ledger's chain id
    let result = await pfc.startValidatorUpdate(destinationBlockchainId, destinationContract, opId(), cvsContractAddress, bvsBlockHeader)
    assert.equal(result.receipt.status, true)
    let found = false;
    for (let log of result.receipt.logs) {
      if (log.event === 'CrossBlockchainCallExecuted') {
        assert.equal(log.args[0].toNumber(), destinationBlockchainId)
        assert.equal(log.args[1].toLowerCase(), destinationContract)
        assert.equal(log.args[2].substring(log.args[2].length-40), validators[0])
        found = true;
      }
    }
    assert.equal(found, true)
  })

  it('should not be able to start remote validator update with invalid block header', async () => {
    let bvsBlockHeader = '0xf90220a048ea1e0e2bc652a31f709559a0d46bd424cb07f184a41cc53d5c2f3056fe5d0fa01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a0eeee286cf03765bd3365e0b9915999225a4ce26ec5d09824170c159ddbebe82ea031a5fe7e7e7c96bb504d07eb5414a57193647635d7364e73b52f6a4a08c5a474a078050f3b89ccff8df8addbc53b9360bf7c2740c7cf206336fe7d945de8308da5bb08405f5e100830ec43084649947d8a6e5a00000000000000000000000000000000000000000000000000000000000000000c0c080c0a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000' // RLP-encoded block header with no round number
    let cvsContractAddress = '0x0000000000000000000000000000000000000000'   // Address of validator set management contract
    let destinationContract = '0xc23cdfef6ec7b1b39c6cb898d7acc71437f167bd'  // Contains the foreign ledger messaging contract address
    let destinationBlockchainId = 2 // Contains the foreign ledger's chain id
    await ta.reverts(pfc.startValidatorUpdate(destinationBlockchainId, destinationContract, opId(), cvsContractAddress, bvsBlockHeader))
  })

  it('should be able to handle Ethereum event log decoding', async () => {
    const input = ({
      tradeId: '321',
      event: 'completeLeadLeg',
      proof: {
        blockchainId: 0,
        eventSig: '0x7a752c4d100a96be23f60f072fed1f33da2890fbe45eb15af52750faa2772a92',
        encodedInfo: '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a752c4d100a96be23f60f072fed1f33da2890fbe45eb15af52750faa2772a920000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000065ef9065b01830a9dbbbf90550f9021a94ca81917905a4985aa40e6ea1e7e5431a3b4747e6e1a04a088333602fc5fc4f1782002fd83cb872f641d7564993fcae5a70619d371b83b901e00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000001686f6c64457865637574696f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000631893f300000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000001348bea00000000000000000000000000000000000000000000000000000000000000033332310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e757365724163636f756e74496432000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e757365724163636f756e744964310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f89994ca81917905a4985aa40e6ea1e7e5431a3b4747e6e1a0f0e25c63981e9a617375c8244c8ac144e4e520acc2cb08e2d4c3781b1a02c067b860000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000033332310000000000000000000000000000000000000000000000000000000000f879948eb0183d4bfa114440a95c9f333ef3439884cddae1a0e86cf26454ff6ddddafa95eaf2baab1df2c062c4341cec61ccfafae50eabf8d3b840000000000000000000000000ec70da29e53f2b7f3f40c6374fb74f9756c460980000000000000000000000000000000000000000000000000000000000000000f9021a94cc84525d71dc26c72178fe6751370404e1c71755e1a07a752c4d100a96be23f60f072fed1f33da2890fbe45eb15af52750faa2772a92b901e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ad67f397a334a4aa39bb4363c47f31ca84548953000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001448903901f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000033332310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e757365724163636f756e74496431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e757365724163636f756e74496432000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        signatureOrProof: '0x00000000000000000000000000000000000000000000000000000000000000c0b31406f5b6642428a2febc39101274f38b9156c0da1e365b93a41a997330ada39d20a14e4e5b918c27c36f49788d13cebb62777c0fcf9f5a4744185de8ca25ab000000000000000000000000000000000000000000000000000000000000076000000000000000000000000000000000000000000000000000000000000009c00000000000000000000000000000000000000000000000000000000000000c20000000000000000000000000000000000000000000000000000000000000066af90667f90664822080b9065ef9065b01830a9dbbbf90550f9021a94ca81917905a4985aa40e6ea1e7e5431a3b4747e6e1a04a088333602fc5fc4f1782002fd83cb872f641d7564993fcae5a70619d371b83b901e00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000001686f6c64457865637574696f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000631893f300000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000001348bea00000000000000000000000000000000000000000000000000000000000000033332310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e757365724163636f756e74496432000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e757365724163636f756e744964310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f89994ca81917905a4985aa40e6ea1e7e5431a3b4747e6e1a0f0e25c63981e9a617375c8244c8ac144e4e520acc2cb08e2d4c3781b1a02c067b860000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000033332310000000000000000000000000000000000000000000000000000000000f879948eb0183d4bfa114440a95c9f333ef3439884cddae1a0e86cf26454ff6ddddafa95eaf2baab1df2c062c4341cec61ccfafae50eabf8d3b840000000000000000000000000ec70da29e53f2b7f3f40c6374fb74f9756c460980000000000000000000000000000000000000000000000000000000000000000f9021a94cc84525d71dc26c72178fe6751370404e1c71755e1a07a752c4d100a96be23f60f072fed1f33da2890fbe45eb15af52750faa2772a92b901e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ad67f397a334a4aa39bb4363c47f31ca84548953000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001448903901f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000033332310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e757365724163636f756e74496431000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e757365724163636f756e744964320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023ef9023ba0a612fc1b407bada52c5208b8d9425ba300c35927f42ad43590367de834916f27a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a095cf527e7b419740aa5ca0f57c8a49e7d69d0a838a870f0ba5f879f39555448fa0275072a694ba521f44b85d3dbd9eda38473590d8964418975550c3d9312edc10a0b31406f5b6642428a2febc39101274f38b9156c0da1e365b93a41a997330ada3bba7d8405f5e100830a9dbb84631893f3b83ff83da00000000000000000000000000000000000000000000000000000000000000000d594ca31306798b41bc81c43094a1e0462890ce7a673808400000000a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e636588000000000000000000000000000000000000000000000000000000000000000000000000000000000239f90236a0a612fc1b407bada52c5208b8d9425ba300c35927f42ad43590367de834916f27a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794ca31306798b41bc81c43094a1e0462890ce7a673a095cf527e7b419740aa5ca0f57c8a49e7d69d0a838a870f0ba5f879f39555448fa0275072a694ba521f44b85d3dbd9eda38473590d8964418975550c3d9312edc10a0b31406f5b6642428a2febc39101274f38b9156c0da1e365b93a41a997330ada3bba7d8405f5e100830a9dbb84631893f3b83af838a00000000000000000000000000000000000000000000000000000000000000000d594ca31306798b41bc81c43094a1e0462890ce7a67380a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045f843b8416fe04c3c2b9357fbe86da631df8c4ee30c536ef7ed61e50b141676a40c1d9cc255cd35ea38277d78979fb2c1dd42d8641bcdc1a404514e9b4741892b2a55634200000000000000000000000000000000000000000000000000000000'
      }
    });
    let result = await pfc.handleEthereumEventLogDecoding(input.proof.encodedInfo, input.proof.signatureOrProof)
    assert.equal(result.receipt.status, true)
  })

  it('should be able to perform call from remote chain with Ethereum proof', async () => {
    // Emit cross blockchain call
    const destinationBlockchainId = sc
    const sourceBlockchainId = sc
    const contractAddress = pay.address

    const tradeId = 'O-'+random()
    const fromAccount = 'Bob'
    const toAccount = 'Alice'
    const operationId = web3.utils.soliditySha3({type: 'string', value: tradeId}, fromAccount, toAccount).substring(2)

    const hd = ({ // Hold details
      operationId,
      fromAccount,
      toAccount,
      notaryId: 'N-123',
      amount: 1,
      duration: 0,
      metaData: ''
    });
    let result = await ptc.createHold(hd.operationId, hd.fromAccount, hd.toAccount, hd.notaryId, hd.amount, hd.duration, hd.metaData);
    assert.equal(result.receipt.status, true)
    const functionSignature = web3.eth.abi.encodeFunctionSignature('completeLeadLeg(string,string,string,uint256)');
    let callData = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'uint256'],
      [tradeId, hd.fromAccount, hd.toAccount, hd.amount]
    )
    const functionCallData = functionSignature + callData.slice(2);
    const crossBlockchainCallResult = await pfc.crossBlockchainCall(destinationBlockchainId, contractAddress, functionCallData)
    const txReceipt = crossBlockchainCallResult.receipt

    // Construct proof
    const block = await web3.eth.getBlock(txReceipt.blockNumber)
    const txHash = txReceipt.transactionHash
    const txProof = await ethProof.receiptProof(txHash)
    const encodedReceiptProof = crosschainMessagingSDK.encodeReceiptProof(txProof)
    const crosschainControlContract = '0x0000000000000000000000000000000000000000'
    const eventSig = web3.utils.soliditySha3('CrossBlockchainCallExecuted(uint256,address,bytes)')
    const encodedInfo = web3.eth.abi.encodeParameters(
      ['uint256', 'address', 'bytes32', 'bytes'],
      [destinationBlockchainId, crosschainControlContract, eventSig, encodedReceiptProof.rlpEncodedReceipt]
    )
    const rlpSiblingNodes = encodedReceiptProof.witness
    const blockHash = block.hash
    const receiptsRoot = block.receiptsRoot
    const blockHeaderObj = crosschainMessagingSDK.getBlockHeaderObjFromBlock('ibft', block)
    const rlpBlockHeaderExcludingSeals = blockHeaderObj.rlpBlockHeaderExcludingSeals
    const rlpBlockHeaderExcludingRound = blockHeaderObj.rlpBlockHeaderExcludingRound
    const rlpValidatorSignatures = blockHeaderObj.rlpValidatorSignatures
    const signatureOrProof = web3.eth.abi.encodeParameters(
      ['bytes', 'bytes32', 'bytes32', 'bytes', 'bytes', 'bytes'],
      [rlpSiblingNodes, receiptsRoot, blockHash, rlpBlockHeaderExcludingSeals, rlpBlockHeaderExcludingRound, rlpValidatorSignatures]
    )

    // Perform remote call via proof
    result = await pfc.performCallFromRemoteChain(sourceBlockchainId, eventSig, encodedInfo, signatureOrProof, {gas: 20000000})
    assert.equal(result.receipt.status, true)
  })

  it('should be able to perform call from remote chain in the presence of some transactions', async () => {
    // Emit cross blockchain call
    const destinationBlockchainId = sc
    const sourceBlockchainId = sc
    const contractAddress = pay.address

    const tradeId = 'O-'+random()
    const fromAccount = 'Bob'
    const toAccount = 'Alice'
    const operationId = web3.utils.soliditySha3({type: 'string', value: tradeId}, fromAccount, toAccount).substring(2)

    const hd = ({ // Hold details
      operationId,
      fromAccount,
      toAccount,
      notaryId: 'N-123',
      amount: 1,
      duration: 0,
      metaData: ''
    });
    let result = await ptc.createHold(hd.operationId, hd.fromAccount, hd.toAccount, hd.notaryId, hd.amount, hd.duration, hd.metaData);
    assert.equal(result.receipt.status, true)
    const functionSignature = web3.eth.abi.encodeFunctionSignature('completeLeadLeg(string,string,string,uint256)');
    let callData = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'uint256'],
      [tradeId, hd.fromAccount, hd.toAccount, hd.amount]
    )
    const functionCallData = functionSignature + callData.slice(2);

    let nonce = await web3.eth.getTransactionCount(accounts[1])-1
    for(let i=0; i<199; i++){
      web3.eth.sendTransaction({from: accounts[1], to: accounts[0], value:1, nonce: ++nonce})
      await sleep(500)
    }

    const crossBlockchainCallResult = await pfc.crossBlockchainCall(destinationBlockchainId, contractAddress, functionCallData)
    const txReceipt = crossBlockchainCallResult.receipt

    // Construct proof
    const block = await web3.eth.getBlock(txReceipt.blockNumber)
    //console.log("Number of transactions:", block.transactions.length)
    const txHash = txReceipt.transactionHash
    const txProof = await ethProof.receiptProof(txHash)
    const encodedReceiptProof = crosschainMessagingSDK.encodeReceiptProof(txProof)
    const crosschainControlContract = '0x0000000000000000000000000000000000000000'
    const eventSig = web3.utils.soliditySha3('CrossBlockchainCallExecuted(uint256,address,bytes)')
    const encodedInfo = web3.eth.abi.encodeParameters(
      ['uint256', 'address', 'bytes32', 'bytes'],
      [destinationBlockchainId, crosschainControlContract, eventSig, encodedReceiptProof.rlpEncodedReceipt]
    )
    const rlpSiblingNodes = encodedReceiptProof.witness
    const blockHash = block.hash
    const receiptsRoot = block.receiptsRoot
    const blockHeaderObj = crosschainMessagingSDK.getBlockHeaderObjFromBlock('ibft', block)
    const rlpBlockHeader = blockHeaderObj.rlpBlockHeader
    const rlpBlockHeaderExcludingRound = blockHeaderObj.rlpBlockHeaderExcludingRound
    const rlpValidatorSignatures = blockHeaderObj.rlpValidatorSignatures
    const signatureOrProof = web3.eth.abi.encodeParameters(
      ['bytes', 'bytes32', 'bytes32', 'bytes', 'bytes', 'bytes'],
      [rlpSiblingNodes, receiptsRoot, blockHash, rlpBlockHeader, rlpBlockHeaderExcludingRound, rlpValidatorSignatures]
    )
    // Perform remote call via proof
    result = await pfc.performCallFromRemoteChain(sourceBlockchainId, eventSig, encodedInfo, signatureOrProof, {gas: 20000000})
    assert.equal(result.receipt.status, true)
  })

  it('should be able to handle Corda event data decoding', async () => {
    const encodedInfo = '0x0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c23cdfef6ec7b1b39c6cb898d7acc71437f167bd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000002ae0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000280d30cb6d01ed31a436b9aa753c50bbf96e0ea57f0f33fb0cf7b315327cad6069800000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000001c4c6755b7c00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c23cdfef6ec7b1b39c6cb898d7acc71437f167bd00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000003039000000000000000000000000000000000000000000000000000000000000000c323032322d31312d30325f310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c547a314955557842654331305a584e3049454a68626d73675154457349457739576e566e4c43424450554e490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c547a314955557842654331305a584e3049454a68626d7367516a497349457739576e566e4c43424450554e4900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075348412d3235360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000027730080c562000000000001d0000027640000000300a3226e65742e636f7264613a51307a55474e2f4b367777777975496c4e66335261773d3dd00000090e0000000500a3226e65742e636f7264613a372b30747468524e384b742b546255446266663837413d3dc0820100a3216e65742e636f7264613a6a6176612e73656375726974792e5075626c69634b6579a05b3059301306072a8648ce3d020106082a8648ce3d03010703420004175d4cc68c1cabe5e3adae46e33b7b1e8b8428e208233b08fe291e81864f1d7c3eef538e0f25cb032a9775cfd3da2b69fab7f0b076606a0e226ba8106299387ca12d636f6d2e68716c61782e636f72646170702e7374617465732e636f6e74726163742e444352436f6e747261637400a3226e65742e636f7264613a6c384e444c4337546d6f66572b417a566968564766773d3dd0000006f40000000d00a3226e65742e636f7264613a716c4f746a6d6a77534a33326d48672f412b687248513d3dc06e02a1334175746f2d6372656174656420627920274f3d48514c41782d746573742042616e6b2042322c204c3d5a75672c20433d434827a1366175746f5f323032322d31312d30325f315f36633130333164612d353632352d343635352d623936322d39333430373764626239643100a3226e65742e636f7264613a6554414961694e4b66362f467979494b2f5a61684b413d3dd0000002080000000300a31b6e65742e636f7264613a6a6176612e74696d652e496e7374616e74c00c02810000000063628c08540000a3226e65742e636f7264613a523477446c646d7063617430714a69614d6f6b4c71673d3dd00000010400000004a105313233343500a3226e65742e636f7264613a59547946443473417359744a363870585a6174782b413d3dc00802a1035454505400a10343424c00a3226e65742e636f7264613a48394b4f69386167557573674b4b69334d45423378673d3dc09e0200a3226e65742e636f7264613a6e6764776274366b5254306c356e6e313675663837413d3dc0240640a1024348a1035a7567a11548514c41782d7465737420437573746f6469616e31404000a3216e65742e636f7264613a6a6176612e73656375726974792e5075626c69634b6579a02c302a300506032b6570032100459f403625ffa7bb6c8a134c6a5948f827c0c183c2895f188931fed9a3534c4200a3226e65742e636f7264613a45583852527570724c736849316d35314f34333333413d3dc08302a10c44453030304132595a50583100a3226e65742e636f7264613a706f656271466b4e7a723766524144726c4b526770413d3dc04d0200a31c6e65742e636f7264613a6a6176612e7574696c2e43757272656e6379a10347425000a31e6e65742e636f7264613a6a6176612e6d6174682e426967446563696d616ca105313233343500a3226e65742e636f7264613a48394b4f69386167557573674b4b69334d45423378673d3dc0f20200a3226e65742e636f7264613a6e6764776274366b5254306c356e6e313675663837413d3dc07806a129556e636f6e6e65637465642055415420427573696e657373204e6574776f726b204f70657261746f72a1024c55a10a4c7578656d626f757267a10e48514c417820532e612e722e6c2ea129556e636f6e6e65637465642055415420427573696e657373204e6574776f726b204f70657261746f724000a3216e65742e636f7264613a6a6176612e73656375726974792e5075626c69634b6579a02c302a300506032b6570032100b19bd2e78b2aff73ca6da53a48a1e4d31dd266c05c2b390a1ce6e88359db208200a31b6e65742e636f7264613a6a6176612e74696d652e496e7374616e74c00f02810000000063628a96712a9e08c000a3226e65742e636f7264613a48394b4f69386167557573674b4b69334d45423378673d3dc09b0200a3226e65742e636f7264613a6e6764776274366b5254306c356e6e313675663837413d3dc0210640a1024348a1035a7567a11248514c41782d746573742042616e6b204131404000a3216e65742e636f7264613a6a6176612e73656375726974792e5075626c69634b6579a02c302a300506032b6570032100dec989d1f7d08669f9078624458038bb0bd4857e812f0532ec1ec2655d90b99b00a3226e65742e636f7264613a4d656c566a6b6b514a4775576352742f734e567074413d3dc01c02a1174443525f4541524d41524b5f464f525f4c454e44494e4754234000a3226e65742e636f7264613a30314a2b42395a6e33693266557852656258614742773d3dc04004414200a3226e65742e636f7264613a715951623867366d674c4f2f664a62775132576b6a673d3dc01502a11050454e44494e475f454e43554d42455254054000a3226e65742e636f7264613a726e69773742324d7169377a6c6b50704b6d4a3737413d3dc01302409854fedf0f32d1420fa0a38db74aed80b100a31b6e65742e636f7264613a6a6176612e74696d652e496e7374616e74c00f02810000000063628ade71110c038000a3226e65742e636f7264613a48394b4f69386167557573674b4b69334d45423378673d3dc09b0200a3226e65742e636f7264613a6e6764776274366b5254306c356e6e313675663837413d3dc0210640a1024348a1035a7567a11248514c41782d746573742042616e6b204232404000a3216e65742e636f7264613a6a6176612e73656375726974792e5075626c69634b6579a02c302a300506032b65700321005d69fa3d4d9c29280cf6b048c4b7c2e63cfb7cd73fbcd7b9ab6c4cfd2191cfc5540300a3226e65742e636f7264613a726e69773742324d7169377a6c6b50704b6d4a3737413d3dc02002a10c323032322d31312d30325f31986c1031da56254655b962934077dbb9d14000a3226e65742e636f7264613a48394b4f69386167557573674b4b69334d45423378673d3dc0ec0200a3226e65742e636f7264613a6e6764776274366b5254306c356e6e313675663837413d3dc04306a1214e6f6e2d76616c69646174696e67205541542053554231204841204e6f74617279a1025553a1084e657720596f726ba10d523320486f6c64436f204c4c43404000a3216e65742e636f7264613a6a6176612e73656375726974792e5075626c69634b6579a05b3059301306072a8648ce3d020106082a8648ce3d0301070342000448a450e7a340c810034f36c6ce78197cbec20d123858813f7e27a881bddfdcfacf21a4115fa93cd9c9a6cceefcf548dd3cd4a0ee6caa7f57eb08ac23e54b6aac0080c562000000000002d000001cbe00000001d000001cb5000000160080c562000000000005d00000018400000005a1296e65742e636f7264612e636f72652e636f6e7472616374732e5472616e73616374696f6e537461746540450080c562000000000003c02602a3226e65742e636f7264613a51307a55474e2f4b367777777975496c4e66335261773d3d40d00000011c000000050080c562000000000004c04607a10a636f6e73747261696e74a1012ac03001a12d6e65742e636f7264612e636f72652e636f6e7472616374732e4174746163686d656e74436f6e73747261696e74404041420080c562000000000004c01807a108636f6e7472616374a106737472696e6745404041420080c562000000000004c03907a10464617461a1012ac02901a1266e65742e636f7264612e636f72652e636f6e7472616374732e436f6e74726163745374617465404041420080c562000000000004c01807a10b656e63756d6272616e6365a103696e7445404042420080c562000000000004c02d07a1066e6f74617279a11d6e65742e636f7264612e636f72652e6964656e746974792e506172747945404041420080c562000000000005c09605a12d6e65742e636f7264612e636f72652e636f6e7472616374732e4174746163686d656e74436f6e73747261696e7440c03001a12d6e65742e636f7264612e636f72652e636f6e7472616374732e4174746163686d656e74436f6e73747261696e740080c562000000000003c02602a3226e65742e636f7264613a4d6766362f7332416a6b5a6154382f6255396e4e53513d3d40450080c562000000000005c08805a1266e65742e636f7264612e636f72652e636f6e7472616374732e436f6e7472616374537461746540c02901a1266e65742e636f7264612e636f72652e636f6e7472616374732e436f6e747261637453746174650080c562000000000003c02602a3226e65742e636f7264613a5a326932426d6f35324566756346585a3842324350513d3d40450080c562000000000005c0d105a11d6e65742e636f7264612e636f72652e6964656e746974792e506172747940450080c562000000000003c02602a3226e65742e636f7264613a48394b4f69386167557573674b4b69334d45423378673d3d40c07b020080c562000000000004c03307a1046e616d65a1256e65742e636f7264612e636f72652e6964656e746974792e436f726461583530304e616d6545404041420080c562000000000004c02f07a1096f776e696e674b6579a1012ac01a01a1176a6176612e73656375726974792e5075626c69634b6579404041420080c562000000000005d00000014400000005a1256e65742e636f7264612e636f72652e6964656e746974792e436f726461583530304e616d6540450080c562000000000003c02602a3226e65742e636f7264613a6e6764776274366b5254306c356e6e313675663837413d3d40c0e3060080c562000000000004c01a07a10a636f6d6d6f6e4e616d65a106737472696e6745404042420080c562000000000004c01707a107636f756e747279a106737472696e6745404041420080c562000000000004c01807a1086c6f63616c697479a106737472696e6745404041420080c562000000000004c01c07a10c6f7267616e69736174696f6ea106737472696e6745404041420080c562000000000004c02007a1106f7267616e69736174696f6e556e6974a106737472696e6745404042420080c562000000000004c01507a1057374617465a106737472696e6745404042420080c562000000000005c0d605a1366e65742e636f7264612e636f72652e636f6e7472616374732e5369676e61747572654174746163686d656e74436f6e73747261696e7440c03001a12d6e65742e636f7264612e636f72652e636f6e7472616374732e4174746163686d656e74436f6e73747261696e740080c562000000000003c02602a3226e65742e636f7264613a372b30747468524e384b742b546255446266663837413d3d40c036010080c562000000000004c02907a1036b6579a1012ac01a01a1176a6176612e73656375726974792e5075626c69634b6579404041420080c562000000000005d00000044a00000005a127636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e444352537461746540c0ae04a1256e65742e636f7264612e636f72652e736368656d61732e517565727961626c655374617465a1266e65742e636f7264612e636f72652e636f6e7472616374732e436f6e74726163745374617465a136636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e436f6e7472616374436f6d70617261626c655374617465a1246e65742e636f7264612e636f72652e636f6e7472616374732e4c696e65617253746174650080c562000000000003c02602a3226e65742e636f7264613a6c384e444c4337546d6f66572b417a566968564766773d3d40d0000003350000000d0080c562000000000004c04307a10b616e6e6f746174696f6e73a12e636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e55736572416e6e6f746174696f6e7345404041420080c562000000000004c04107a1056173736574a132636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e44435241737365744465736372697074696f6e45404041420080c562000000000004c02a07a103626e6fa11d6e65742e636f7264612e636f72652e6964656e746974792e506172747945404041420080c562000000000004c02207a10763726561746564a1116a6176612e74696d652e496e7374616e7445404041420080c562000000000004c03307a10c6561726d61726b6564466f72a11d6e65742e636f7264612e636f72652e6964656e746974792e506172747945404042420080c562000000000004c03b07a1096576656e7454797065a128636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e4576656e745479706545404041420080c562000000000004c02d07a1066c656e646572a11d6e65742e636f7264612e636f72652e6964656e746974792e506172747945404042420080c562000000000004c04907a1096c6966656379636c65a136636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e4443525374617465244c6966656379636c65537461746545404041420080c562000000000004c03b07a1086c696e6561724964a1296e65742e636f7264612e636f72652e636f6e7472616374732e556e697175654964656e74696669657245404041420080c562000000000004c02307a1086d6f646966696564a1116a6176612e74696d652e496e7374616e7445404041420080c562000000000004c02c07a1056f776e6572a11d6e65742e636f7264612e636f72652e6964656e746974792e506172747945404041420080c562000000000004c01d07a10e73657175656e63654e756d626572a103696e7445a101304041420080c562000000000004c03a07a10774726164654964a1296e65742e636f7264612e636f72652e636f6e7472616374732e556e697175654964656e74696669657245404042420080c562000000000005c0ae05a1256e65742e636f7264612e636f72652e736368656d61732e517565727961626c65537461746540c05002a1256e65742e636f7264612e636f72652e736368656d61732e517565727961626c655374617465a1266e65742e636f7264612e636f72652e636f6e7472616374732e436f6e747261637453746174650080c562000000000003c02602a3226e65742e636f7264613a42383263534636543034544350666c67587332626b673d3d40450080c562000000000005c0d005a136636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e436f6e7472616374436f6d70617261626c65537461746540c06102a136636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e436f6e7472616374436f6d70617261626c655374617465a1266e65742e636f7264612e636f72652e636f6e7472616374732e436f6e747261637453746174650080c562000000000003c02602a3226e65742e636f7264613a2b784b334151745a313959556f35627a356447502b513d3d40450080c562000000000005c0ac05a1246e65742e636f7264612e636f72652e636f6e7472616374732e4c696e656172537461746540c04f02a1246e65742e636f7264612e636f72652e636f6e7472616374732e4c696e6561725374617465a1266e65742e636f7264612e636f72652e636f6e7472616374732e436f6e747261637453746174650080c562000000000003c02602a3226e65742e636f7264613a416a4d5a704d6f6a5268685a36364a6b7433576243413d3d40450080c562000000000005c0af05a12e636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e55736572416e6e6f746174696f6e7340450080c562000000000003c02602a3226e65742e636f7264613a716c4f746a6d6a77534a33326d48672f412b687248513d3d40c048020080c562000000000004c01b07a10b6465736372697074696f6ea106737472696e6745404041420080c562000000000004c01407a1046e616d65a106737472696e6745404041420080c562000000000005d00000015100000005a132636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e44435241737365744465736372697074696f6e40450080c562000000000003c02602a3226e65742e636f7264613a6554414961694e4b66362f467979494b2f5a61684b413d3d40c0e3030080c562000000000004c03007a115636f6c6c61746572616c697a6174696f6e54696d65a1116a6176612e74696d652e496e7374616e7445404041420080c562000000000004c04707a10f637573746f64794c6f636174696f6ea12e636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e437573746f64794c6f636174696f6e45404041420080c562000000000004c04707a10f696e76656e746f7279546172676574a12e636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e496e76656e746f727954617267657445404041420080c562000000000005d00000014000000005a12e636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e437573746f64794c6f636174696f6e40450080c562000000000003c02602a3226e65742e636f7264613a523477446c646d7063617430714a69614d6f6b4c71673d3d40c0d6040080c562000000000004c01907a1096163636f756e744964a106737472696e6745404041420080c562000000000004c04607a10b6163636f756e7454797065a131636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e437573746f64794163636f756e745479706545404041420080c562000000000004c01b07a10b637573746f6469616e4964a106737472696e6745404042420080c562000000000004c02b07a1046e6f6465a11d6e65742e636f7264612e636f72652e6964656e746974792e506172747945404041420080c562000000000006c0bd06a131636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e437573746f64794163636f756e74547970654045a1046c6973740080c562000000000003c02602a3226e65742e636f7264613a59547946443473417359744a363870585a6174782b413d3d40c04d030080c562000000000007c00902a103545450a101300080c562000000000007c01102a10b435553544f4d4552524546a101310080c562000000000007c00e02a108504c4154464f524da101320080c562000000000005c06605a12e636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e496e76656e746f727954617267657440450080c562000000000003c02602a3226e65742e636f7264613a6b4b6e3979547a4871534d747557756f35307a7769413d3d40450080c562000000000006d00000055c00000006a128636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e4576656e74547970654045a1046c6973740080c562000000000003c02602a3226e65742e636f7264613a4d656c566a6b6b514a4775576352742f734e567074413d3d40d0000004ef000000260080c562000000000007c01502a10f554e444546494e45445f4556454e54a101300080c562000000000007c01302a10d53544154455f55504752414445a101310080c562000000000007c01402a10e53544154455f44454c4554494f4ea101320080c562000000000007c01002a10a4443525f435245415445a101330080c562000000000007c01102a10b4443525f434f4e4649524da101340080c562000000000007c01002a10a4443525f52454a454354a101350080c562000000000007c01f02a1194443525f5345545f434f4c4c41544552414c495a4154494f4ea101360080c562000000000007c01002a10a4443525f465245455a45a101370080c562000000000007c01202a10c4443525f554e465245455a45a101380080c562000000000007c01602a1104443525f4154544143485f5452414445a101390080c562000000000007c00f02a1084443525f4c454e44a10231300080c562000000000007c01302a10c4443525f454e43554d424552a10231310080c562000000000007c01102a10a4443525f504c45444745a10231320080c562000000000007c01102a10a4443525f554e57494e44a10231330080c562000000000007c01502a10e4443525f554e454e43554d424552a10231340080c562000000000007c00f02a1084443525f4641494ca10231350080c562000000000007c01702a1104443525f4445544143485f5452414445a10231360080c562000000000007c01802a1114443525f4348414e47455f414d4f554e54a10231370080c562000000000007c01b02a1144443525f524551554553545f44454c4554494f4ea10231380080c562000000000007c01302a10c54524144455f435245415445a10231390080c562000000000007c01302a10c54524144455f52454a454354a10232300080c562000000000007c01502a10e54524144455f5343484544554c45a10232310080c562000000000007c01502a10e54524144455f4143544956415445a10232320080c562000000000007c01302a10c54524144455f4d4154555245a10232330080c562000000000007c01102a10a54524144455f4641494ca10232340080c562000000000007c01302a10c54524144455f43414e43454ca10232350080c562000000000007c01c02a11554524144455f4348414e47455f4d41545552495459a10232360080c562000000000007c01a02a11354524144455f4348414e47455f414d4f554e54a10232370080c562000000000007c01602a10f50524f504f53414c5f435245415445a10232380080c562000000000007c01402a10d50524f504f53414c5f5349474ea10232390080c562000000000007c01502a10e50524f504f53414c5f4150504c59a10233300080c562000000000007c01602a10f50524f504f53414c5f52454a454354a10233310080c562000000000007c01602a10f50524f504f53414c5f455850495245a10233320080c562000000000007c01d02a1164443525f494e535452554354494f4e5f435245415445a10233330080c562000000000007c01302a10c4443525f5452414e53464552a10233340080c562000000000007c01e02a1174443525f4541524d41524b5f464f525f4c454e44494e47a10233350080c562000000000007c01d02a1164443525f4541524d41524b5f464f525f554e57494e44a10233360080c562000000000007c01a02a1134443525f554e444f5f4541524d41524b494e47a10233370080c562000000000005d00000016d00000005a136636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e4443525374617465244c6966656379636c65537461746540450080c562000000000003c02602a3226e65742e636f7264613a30314a2b42395a6e33693266557852656258614742773d3d40c0fb040080c562000000000004c02707a1106973436f6c6c61746572616c697a6564a107626f6f6c65616e45a10566616c73654041420080c562000000000004c01f07a108697346726f7a656ea107626f6f6c65616e45a10566616c73654041420080c562000000000004c03e07a106737461747573a12e636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e44435253746174652453746174757345404041420080c562000000000004c04607a10c7472616e7366657254797065a130636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e6465616c2e5472616e736665725479706545404042420080c562000000000006d00000013f00000006a12e636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e4443525374617465245374617475734045a1046c6973740080c562000000000003c02602a3226e65742e636f7264613a715951623867366d674c4f2f664a62775132576b6a673d3d40c0cf070080c562000000000007c00d02a10743524541544544a101300080c562000000000007c00e02a10852454a4543544544a101310080c562000000000007c00f02a109434f4e4649524d4544a101320080c562000000000007c01002a10a454e43554d4245524544a101330080c562000000000007c01602a11050454e44494e475f44454c4554494f4ea101340080c562000000000007c01602a11050454e44494e475f454e43554d424552a101350080c562000000000007c01402a10e50454e44494e475f554e57494e44a101360080c562000000000006c0dd06a130636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e6465616c2e5472616e73666572547970654045a1046c6973740080c562000000000003c02602a3226e65742e636f7264613a347a6e7a666d366f346263477256766e714b5a7147773d3d40c06e040080c562000000000007c01402a10e5449544c455f5452414e53464552a101300080c562000000000007c00c02a106504c45444745a101310080c562000000000007c01302a10d434153485f45584348414e4745a101320080c562000000000007c00a02a1044e4f4e45a101330080c562000000000005c0a505a1296e65742e636f7264612e636f72652e636f6e7472616374732e556e697175654964656e74696669657240450080c562000000000003c02602a3226e65742e636f7264613a726e69773742324d7169377a6c6b50704b6d4a3737413d3d40c043020080c562000000000004c01a07a10a65787465726e616c4964a106737472696e6745404042420080c562000000000004c01007a1026964a1047575696445404041420080c562000000000005c0dd05a134636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e4261736b6574496e76656e746f727954617267657440450080c562000000000003c02602a3226e65742e636f7264613a45583852527570724c736849316d35314f34333333413d3d40c070020080c562000000000004c01607a1066261736b6574a106737472696e6745404042420080c562000000000004c04107a10d6e6f74696f6e616c56616c7565a12a636f6d2e68716c61782e636f72646170702e7374617465732e6d6f64656c2e4d6f6e6579416d6f756e7445404041420080c562000000000005c0c605a12a636f6d2e68716c61782e636f72646170702e7374617465732e6d6f64656c2e4d6f6e6579416d6f756e7440450080c562000000000003c02602a3226e65742e636f7264613a706f656271466b4e7a723766524144726c4b526770413d3d40c063020080c562000000000004c02407a10863757272656e6379a1126a6176612e7574696c2e43757272656e637945404041420080c562000000000004c02607a1087175616e74697479a1146a6176612e6d6174682e426967446563696d616c45404041420080c562000000000009d10000014c00000002a128636f6d2e68716c61782e636f72646170702e7374617465732e73746174652e4576656e7454797065d100000119000000020080c56200000000000b5401d000000104000000040080c56200000000000ac03803a10b456e756d44656661756c74a10f554e444546494e45445f4556454e54a1174443525f4541524d41524b5f464f525f4c454e44494e470080c56200000000000ac03703a10b456e756d44656661756c74a10f554e444546494e45445f4556454e54a1164443525f4541524d41524b5f464f525f554e57494e440080c56200000000000ac03403a10b456e756d44656661756c74a10f554e444546494e45445f4556454e54a1134443525f554e444f5f4541524d41524b494e470080c56200000000000ac02d03a10b456e756d44656661756c74a10f554e444546494e45445f4556454e54a10c4443525f5452414e5346455200000000000000000000000000'
    const signatureOrProof = '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000240aa7af2abdaa2e37785b23aec36f73a3280ff1326595d0f976532ff8246d8536c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000042f248bbbe40d5bc1efcf85caf7ea0c226006cd4ced5461277cc0060f44daf773363a43f93db7589f8de925e322bc669a9ad0fb382e62db71a19456690e0b55c4e2100c398c86665b6f8579eaa8b6cb371f18722c5bf71e1ad9954793a1495e2987224cb8d9c596ca77cda32ded2446a9567bc98f5c951086eb20e81bf6dd07d000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160601a16f49d0c6e8bd14415f466f8bd4b0981f58a15bdb06a1fa1e3dc49553f000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003805d69fa3d4d9c29280cf6b048c4b7c2e63cfb7cd73fbcd7b9ab6c4cfd2191cfc59a43f0649afe731fa570ad483aa69a03f5e0502bd5c0fd58831080537e4873fb84830bbcd052ba65db808cd92e6e98f914a6329590a0660419f822c10235fc0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000280000000b00000004aa7af2abdaa2e37785b23aec36f73a3280ff1326595d0f976532ff8246d8536c000000000000000000000000000000000000000000000000459f403625ffa7bb6c8a134c6a5948f827c0c183c2895f188931fed9a3534c4210848a754ab513c63ec7d4d1ebb114776ad5f61504e3cf9f48993d9a5499ef4be6a9bbede14abb13457e7bb43b05b37be58af40c4764f75778a70dea9b6a1605000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000280000000b00000004aa7af2abdaa2e37785b23aec36f73a3280ff1326595d0f976532ff8246d8536c000000000000000000000000000000000000000000000000dec989d1f7d08669f9078624458038bb0bd4857e812f0532ec1ec2655d90b99be1aaaa7a4e105a3b415282c4c305347337c09a43472c9d151a36e1e0d67a78afd20c96d79e595ec2e3e6af64e13f98f1e1d7fac5e9b994f3eaf09aff5e66890c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000280000000b00000004aa7af2abdaa2e37785b23aec36f73a3280ff1326595d0f976532ff8246d8536c00000000000000000000000000000000000000000000000048a450e7a340c810034f36c6ce78197cbec20d123858813f7e27a881bddfdcfaed1fb3e9662181efbdc1203abbf781c663ed078d9f975a40d3e214a5ed1fac68805f0c5a77271133aae179ce9ac121bdc6b42dd257de57b346be41bff79e0f24000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000280000000b000000030baed5ed8b8ba1a10432ef5cb62525868e5569b8e9088993990f69c78047c0de000000000000000000000000000000000000000000000000'
    let result = await pfc.handleCordaTransactionDecoding(encodedInfo, signatureOrProof)
    assert.equal(result.receipt.status, true)
  })

  it('should be able to perform call from remote chain with Corda proof', async () => {
    const foreignA = 'Tz1QYXJ0eUEsIEw9TG9uZG9uLCBDPUdC' // 'O=PartyA, L=London, C=GB'
    const foreignB = 'Tz1QYXJ0eUIsIEw9TmV3IFlvcmssIEM9VVM=' // 'O=PartyB, L=New York, C=US';
    const tradeId = '1abec329'
    const fromAccount = 'Bob'
    const toAccount = 'Alice'
    const operationId = web3.utils.soliditySha3({type: 'string', value: tradeId}, fromAccount, toAccount).substring(2)

    const hd = ({ // Hold details
      operationId,
      fromAccount,
      toAccount,
      notaryId: 'N-123',
      amount: 1000000,
      duration: 0,
      metaData: ''
    });
    let result = await ptc.createHold(hd.operationId, hd.fromAccount, hd.toAccount, hd.notaryId, hd.amount, hd.duration, hd.metaData);
    assert.equal(result.receipt.status, true)
    result = await pay.setForeignAccountIdToLocalAccountId(hd.fromAccount, foreignB)
    assert.equal(result.receipt.status, true)
    result = await pay.setForeignAccountIdToLocalAccountId(hd.toAccount, foreignA)
    assert.equal(result.receipt.status, true)
    const td = ({ // Trade details
      tradeId: tradeId,
      sender: fromAccount,
      receiver: toAccount,
      amount: 1000000
    });
    let hold = await pay.getHold(td, ptc.address)
    let check = await pay.checkHold(hold, td, ptc.address)
    assert.equal(check.receipt.status, true)
    const eventSig = web3.eth.abi.encodeFunctionSignature('requestFollowLeg(string,string,string,address,uint256,uint256)');
    let callData = web3.eth.abi.encodeParameters(
      ['string', 'string', 'string', 'address', 'uint256', 'uint256'],
      [td.tradeId, foreignB, foreignA, pay.address, fc, td.amount]
    )
    callData = eventSig + callData.slice(2);
    const eventData = web3.eth.abi.encodeParameters(
      [
        {
          'EventData': {
            'callParameters': 'bytes',
            'hashAlgorithm': 'string',
            'privacySalt': 'bytes32',
            'ComponentData': {
              'groupIndex': 'uint8',
              'internalIndex': 'uint8',
              'encodedBytes': 'bytes',
            },
          },
        },
      ],
      [
        {
          'callParameters': callData,
          'hashAlgorithm': 'SHA-256',
          'privacySalt': '0xDF0EEADE8ED3EAA3688070E56CE1F0138F0B0A5CC4AABD68019DBEB3631D217E',
          'ComponentData': {
            'groupIndex': '0x1',
            'internalIndex': '0x0',
            'encodedBytes': '0x0080C562000000000001D000000E420000000300A3226E65742E636F7264613A51307A55474E2F4B367777777975496C4E66335261773D3DD0000003980000000500A3226E65742E636F7264613A372B30747468524E384B742B546255446266663837413D3DC0820100A3216E65742E636F7264613A6A6176612E73656375726974792E5075626C69634B6579A05B3059301306072A8648CE3D020106082A8648CE3D03010703420004038D226DCD0FA574316DA478AA75225E6CE18F65CBD96E60BF3C8251B196541756E5DCF7CCAB21B712601ED0278501F2F33D0B5FDAA4C09E62639464E4910871A12F6E65742E636F7264612E73616D706C65732E6578616D706C652E636F6E7472616374732E444352436F6E747261637400A3226E65742E636F7264613A446C64573979533474424F7A653671763655345154413D3DD0000001D600000008A10347425000A3226E65742E636F7264613A48394B4F69386167557573674B4B69334D45423378673D3DC0920200A3226E65742E636F7264613A6E6764776274366B5254306C356E6E313675663837413D3DC0180640A1024742A1064C6F6E646F6EA106506172747941404000A3216E65742E636F7264613A6A6176612E73656375726974792E5075626C69634B6579A02C302A300506032B657003210004473F5846E9C090BC82D80C3B0F01E7058E21684C1967D71D3A338120A32B4C00A3226E65742E636F7264613A726E69773742324D7169377A6C6B50704B6D4A3737413D3DC013024098EEF2F40E292D412AA21CCB9E8A8216E000A3226E65742E636F7264613A48394B4F69386167557573674B4B69334D45423378673D3DC0940200A3226E65742E636F7264613A6E6764776274366B5254306C356E6E313675663837413D3DC01A0640A1025553A1084E657720596F726BA106506172747942404000A3216E65742E636F7264613A6A6176612E73656375726974792E5075626C69634B6579A02C302A300506032B65700321002E7F70B8A6499C1DE28DF983A882E057BF8AEECE0F677E402B6A128A615B3D1140A1094541524D41524B4544A1083161626563333239A107313030303030304000A3226E65742E636F7264613A48394B4F69386167557573674B4B69334D45423378673D3DC0920200A3226E65742E636F7264613A6E6764776274366B5254306C356E6E313675663837413D3DC0180640A1024742A1064C6F6E646F6EA1064E6F74617279404000A3216E65742E636F7264613A6A6176612E73656375726974792E5075626C69634B6579A02C302A300506032B6570032100C98D06DEEFF77BAA9339C709818F3AB9313740EE39CC6193E341C687DFA38CF40080C562000000000002D000000A6000000001D000000A570000000A0080C562000000000005D00000018400000005A1296E65742E636F7264612E636F72652E636F6E7472616374732E5472616E73616374696F6E537461746540450080C562000000000003C02602A3226E65742E636F7264613A51307A55474E2F4B367777777975496C4E66335261773D3D40D00000011C000000050080C562000000000004C04607A10A636F6E73747261696E74A1012AC03001A12D6E65742E636F7264612E636F72652E636F6E7472616374732E4174746163686D656E74436F6E73747261696E74404041420080C562000000000004C01807A108636F6E7472616374A106737472696E6745404041420080C562000000000004C03907A10464617461A1012AC02901A1266E65742E636F7264612E636F72652E636F6E7472616374732E436F6E74726163745374617465404041420080C562000000000004C01807A10B656E63756D6272616E6365A103696E7445404042420080C562000000000004C02D07A1066E6F74617279A11D6E65742E636F7264612E636F72652E6964656E746974792E506172747945404041420080C562000000000005C09605A12D6E65742E636F7264612E636F72652E636F6E7472616374732E4174746163686D656E74436F6E73747261696E7440C03001A12D6E65742E636F7264612E636F72652E636F6E7472616374732E4174746163686D656E74436F6E73747261696E740080C562000000000003C02602A3226E65742E636F7264613A4D6766362F7332416A6B5A6154382F6255396E4E53513D3D40450080C562000000000005C08805A1266E65742E636F7264612E636F72652E636F6E7472616374732E436F6E7472616374537461746540C02901A1266E65742E636F7264612E636F72652E636F6E7472616374732E436F6E747261637453746174650080C562000000000003C02602A3226E65742E636F7264613A5A326932426D6F35324566756346585A3842324350513D3D40450080C562000000000005C0D105A11D6E65742E636F7264612E636F72652E6964656E746974792E506172747940450080C562000000000003C02602A3226E65742E636F7264613A48394B4F69386167557573674B4B69334D45423378673D3D40C07B020080C562000000000004C03307A1046E616D65A1256E65742E636F7264612E636F72652E6964656E746974792E436F726461583530304E616D6545404041420080C562000000000004C02F07A1096F776E696E674B6579A1012AC01A01A1176A6176612E73656375726974792E5075626C69634B6579404041420080C562000000000005D00000014400000005A1256E65742E636F7264612E636F72652E6964656E746974792E436F726461583530304E616D6540450080C562000000000003C02602A3226E65742E636F7264613A6E6764776274366B5254306C356E6E313675663837413D3D40C0E3060080C562000000000004C01A07A10A636F6D6D6F6E4E616D65A106737472696E6745404042420080C562000000000004C01707A107636F756E747279A106737472696E6745404041420080C562000000000004C01807A1086C6F63616C697479A106737472696E6745404041420080C562000000000004C01C07A10C6F7267616E69736174696F6EA106737472696E6745404041420080C562000000000004C02007A1106F7267616E69736174696F6E556E6974A106737472696E6745404042420080C562000000000004C01507A1057374617465A106737472696E6745404042420080C562000000000005C0D605A1366E65742E636F7264612E636F72652E636F6E7472616374732E5369676E61747572654174746163686D656E74436F6E73747261696E7440C03001A12D6E65742E636F7264612E636F72652E636F6E7472616374732E4174746163686D656E74436F6E73747261696E740080C562000000000003C02602A3226E65742E636F7264613A372B30747468524E384B742B546255446266663837413D3D40C036010080C562000000000004C02907A1036B6579A1012AC01A01A1176A6176612E73656375726974792E5075626C69634B6579404041420080C562000000000005D00000024600000005A1296E65742E636F7264612E73616D706C65732E6578616D706C652E7374617465732E444352537461746540C07603A1246E65742E636F7264612E636F72652E636F6E7472616374732E4C696E6561725374617465A1266E65742E636F7264612E636F72652E636F6E7472616374732E436F6E74726163745374617465A1256E65742E636F7264612E636F72652E736368656D61732E517565727961626C6553746174650080C562000000000003C02602A3226E65742E636F7264613A446C64573979533474424F7A653671763655345154413D3D40D000000167000000080080C562000000000004C01807A10863757272656E6379A106737472696E6745404042420080C562000000000004C02D07A106697373756572A11D6E65742E636F7264612E636F72652E6964656E746974792E506172747945404042420080C562000000000004C03B07A1086C696E6561724964A1296E65742E636F7264612E636F72652E636F6E7472616374732E556E697175654964656E74696669657245404041420080C562000000000004C02C07A1056F776E6572A11D6E65742E636F7264612E636F72652E6964656E746974792E506172747945404042420080C562000000000004C01507A10570726F6F66A106737472696E6745404042420080C562000000000004C01607A106737461747573A106737472696E6745404042420080C562000000000004C01707A10774726164654964A106737472696E6745404042420080C562000000000004C01507A10576616C7565A106737472696E6745404042420080C562000000000005C0AC05A1246E65742E636F7264612E636F72652E636F6E7472616374732E4C696E656172537461746540C04F02A1246E65742E636F7264612E636F72652E636F6E7472616374732E4C696E6561725374617465A1266E65742E636F7264612E636F72652E636F6E7472616374732E436F6E747261637453746174650080C562000000000003C02602A3226E65742E636F7264613A416A4D5A704D6F6A5268685A36364A6B7433576243413D3D40450080C562000000000005C0AE05A1256E65742E636F7264612E636F72652E736368656D61732E517565727961626C65537461746540C05002A1256E65742E636F7264612E636F72652E736368656D61732E517565727961626C655374617465A1266E65742E636F7264612E636F72652E636F6E7472616374732E436F6E747261637453746174650080C562000000000003C02602A3226E65742E636F7264613A42383263534636543034544350666C67587332626B673D3D40450080C562000000000005C0A505A1296E65742E636F7264612E636F72652E636F6E7472616374732E556E697175654964656E74696669657240450080C562000000000003C02602A3226E65742E636F7264613A726E69773742324D7169377A6C6B50704B6D4A3737413D3D40C043020080C562000000000004C01A07A10A65787465726E616C4964A106737472696E6745404042420080C562000000000004C01007A1026964A1047575696445404041420080C562000000000009C10100',
          }
        }
      ]
    )
    let encodedInfo = web3.eth.abi.encodeParameters(
      ['uint256', 'address', 'bytes32', 'bytes'],
      [fc, pay.address, eventSig, eventData]
    )
    let signatureOrProof = web3.eth.abi.encodeParameters(
      [
        {
          'Signatures':{
            'ProofData':{
              'root':'bytes32',
              'witnesses':'bytes32[]',
              'flags':'uint8[]',
              'values':'bytes32[]',
            },
            'Signature[]':{
              'by':'uint256',
              'sigR':'uint256',
              'sigS':'uint256',
              'sigV':'uint256',
              'meta':'bytes',
            }
          },
        },
      ],
      [
        {
          'ProofData': {
            'root': '0x523CD7D8979252D12EF558DB5C209D507DF2ED202B4B4773EE85DC843AB76FEA',
            'witnesses': [
              '0xECD8A967383426FC26280DF04788F53088D97A911FDAA28228E62B53A388A71A',
              '0xCEF204E9B3677E9337FEFF0674A04D58569A5EECB5FC48559C49E10ADD4299DB',
              '0x414077002C084064BC41992736749DF2A70B4BA08018370451B1518401F7B94B',
              '0xC63731627A1CAFC631ED5ED633322C71EDA4B5C19427669984C8A2414DB1D16E',
            ],
            'flags': ['0x03', '0x01', '0x01', '0x01'],
            'values': ['0x973D2F80FDD0B90D585C3464AA9E531C1272734A94277525A937CED0099D09E5'],
          },
          'Signature':[{
            'by': '0x04473F5846E9C090BC82D80C3B0F01E7058E21684C1967D71D3A338120A32B4C',
            'sigR': '0x1F5C508E0CDED91C319F5634F112EBA8EFC2244413FF9A9669C7399BD4F97A4A',
            'sigS': '0x6E8F1025ADC635DB5D2ED8B62ADB1E302299EA7C88D3823E52A4897334633808',
            'sigV': '0x0000000000000000000000000000000000000000000000000000000000000000',
            'meta': '0x0000000A00000004523CD7D8979252D12EF558DB5C209D507DF2ED202B4B4773EE85DC843AB76FEA',
          },{
            'by': '0x2E7F70B8A6499C1DE28DF983A882E057BF8AEECE0F677E402B6A128A615B3D11',
            'sigR': '0x8FE7943AD51770DC6C5B5AFD3300AA9AE093156C37A42F83B335AF06F446439F',
            'sigS': '0x4A79D6F912473BFC1B9070B36DABD22FB2F0BE4549EBFE641638F2F718B7CF00',
            'sigV': '0x0000000000000000000000000000000000000000000000000000000000000000',
            'meta': '0x0000000A00000004523CD7D8979252D12EF558DB5C209D507DF2ED202B4B4773EE85DC843AB76FEA',
          },{
            'by': '0xC98D06DEEFF77BAA9339C709818F3AB9313740EE39CC6193E341C687DFA38CF4',
            'sigR': '0x746811EB312E8A329CD9843FA26CC7726BDC2E5FD10DB5AE35A758ED81E8B928',
            'sigS': '0x76B8B458DA2273123DCDEDF51F0A9872C74A0EAC3038D88DA5E00BEF90B43502',
            'sigV': '0x0000000000000000000000000000000000000000000000000000000000000000',
            'meta': '0x0000000A00000004E2C3D020D89C27D4ACE91EFD962A980C6B569D00E0BA0F0EF63918A61A97E56F',
          }
          ],
        }
      ]
    )
    try {
      result = await pfc.performCallFromRemoteChain(fc, eventSig, encodedInfo, signatureOrProof)
      assert.equal(result.receipt.status, true)
      //console.log('Gas used to perform call from remote chain: ' + result.receipt.gasUsed)
    } catch (err) {
      //console.log({err})
      assert.fail('No revert expected:', err)
    }
    let found = false;
    for(let log of result.receipt.logs) {
      if (log.event === 'CrossBlockchainCallExecuted')
        found = true;
    }
    assert.equal(found, true)
    try {
      await ta.reverts(
        pay.checkHold(hd, td, ptc.address),
        'Hold does not exist'
      );
    } catch (err){
      //console.log({err})
    }
  })

  it('should be able to emit cross blockchain call event', async () => {
    let result = await pfc.crossBlockchainCall(fc, '0xE903048bBb91310cE915ce08b40e79BFF13A78f0', '0x123')
    assert.equal(result.receipt.status, true)
    let found = false;
    for(let log of result.receipt.logs) {
      if (log.event === 'CrossBlockchainCallExecuted')
        found = true;
    }
    assert.equal(found, true)
  })

})
