apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

description 'Corda EVM Bridge demo'

cordapp {
    info {
        name "Corda EVM Bridge Demo"
        vendor "R3"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version
    }
}

dependencies {

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    cordaRuntime "org.slf4j:slf4j-simple:$slf4j_version"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        // NOTE: using quasarExcludePackages: ["okhttp3**"] to prevent the following runtime warning
        //
        // [quasar] WARNING: UnableToInstrumentException encountered when instrumenting
        // okhttp3/internal/connection/RealConnectionPool#lambda$new$0()V: Unable to instrument
        // okhttp3/internal/connection/RealConnectionPool#lambda$new$0()V because of blocking call
        // to java/lang/Object#wait(JI)V
        extraConfig = [
                quasarExcludePackages: ["okhttp3**"]
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]

        runSchemaMigration = true
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: true]
        p2pPort 10001
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5001"
                ]
        ]
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost:10021")
        }
    }

    node {
        name "O=Alice,L=London,C=GB"
        p2pPort 10002
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5002"
                ]
        ]
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10022")
        }

        // core Web3j dependency
//        cordapp "org.web3j:rlp:$web3jVersion"
//        cordapp "org.web3j:core:$web3jVersion"
//        cordapp "org.web3j:crypto:$web3jVersion"
//        cordapp "org.web3j:abi:$web3jVersion"
//        cordapp "org.web3j:utils:$web3jVersion"
//        cordapp "org.web3j:tuples:$web3jVersion"
//        cordapp "io.reactivex.rxjava2:rxjava:2.2.2"
//        cordapp "org.reactivestreams:reactive-streams:1.0.2"
//
//        // base evm-bridge flows and contracts
//        cordapp project(':evm-bridge-contracts')
//        cordapp project(':evm-bridge-workflows')
//
//        // sample evm-bridge flows
//        cordapp project(':samples:evm-bridge:bridge-workflows')
    }

    node {
        name "O=Bob,L=London,C=GB"
        p2pPort 10003
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5003"
                ]
        ]        
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10023")
        }

        // core Web3j dependency
//        cordapp "org.web3j:rlp:$web3jVersion"
//        cordapp "org.web3j:core:$web3jVersion"
//        cordapp "org.web3j:crypto:$web3jVersion"
//        cordapp "org.web3j:abi:$web3jVersion"
//        cordapp "org.web3j:utils:$web3jVersion"
//        cordapp "org.web3j:tuples:$web3jVersion"
//        cordapp "io.reactivex.rxjava2:rxjava:2.2.2"
//        cordapp "org.reactivestreams:reactive-streams:1.0.2"
//
//        // base evm-bridge flows and contracts
//        cordapp project(':evm-bridge-contracts')
//        cordapp project(':evm-bridge-workflows')
//
//        // sample evm-bridge flows
//        cordapp project(':samples:evm-bridge:bridge-workflows')
    }

    node {
        name "O=Bridge,L=London,C=GB"
        p2pPort 10004
        extraConfig = [
                'custom.jvmArgs': [
                        "-Xmx1G",
                        "-XX:+UseG1GC",
                        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5004"
                ]
        ]
        rpcSettings {
            address("localhost:10014")
            adminAddress("localhost:10024")
        }

        // core Web3j dependency
//        cordapp "org.web3j:rlp:$web3jVersion"
//        cordapp "org.web3j:core:$web3jVersion"
//        cordapp "org.web3j:crypto:$web3jVersion"
//        cordapp "org.web3j:abi:$web3jVersion"
//        cordapp "org.web3j:utils:$web3jVersion"
//        cordapp "org.web3j:tuples:$web3jVersion"
//        cordapp "io.reactivex.rxjava2:rxjava:2.2.2"
//        cordapp "org.reactivestreams:reactive-streams:1.0.2"
//
//        // base evm-bridge flows and contracts
//        cordapp project(':evm-bridge-contracts')
//        cordapp project(':evm-bridge-workflows')
//
//        // sample evm-bridge flows
//        cordapp project(':samples:evm-bridge:bridge-workflows')
    }
}
