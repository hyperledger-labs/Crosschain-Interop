@startuml 1_dvp_leader_follower_activity_diagram
skinparam ActivityBackgroundColor LightBlue
skinparam activityDiamondBackgroundColor transparent
skinparam defaultTextAlignment left
skinparam shadowing false
skinparam Swimlane {
  TitleFontColor black
  TitleFontSize 20
  BorderColor black
  BorderThickness 2
  swimlaneWidth same
}

|              **Network A**              \n                   Corda |
 |           **Local Services**           \n                   Party A |
 |           **Local Services**           \n                   Party B |
 |           **Local Services**           \n                   Party A |
  start
  :Party A and Party B agree to settle a
  PvP trade using a uniquely generated
  trade id.;
  :Party A places hold;

|              **Network A**              \n                   Corda |

  :Party A creates a draft
  transaction, placing securities
  on hold for Party B against the
  given trade id. Party B signs
  the transaction after validating
  it, Party A signs it and the notary
  finalises it after verifying
  uniqueness of transaction inputs.;
  detach

 |           **Local Services**           \n                   Party B |

  start
  :Party A and Party B agree to settle a
  PvP trade using a uniquely generated
  trade id.;
  :Party B places hold;

|              **Network B**              \n                Ethereum |

  :Party B places the cash on hold for
  Party A, marking the ""XvP"" contract
  as notary.;
  detach

 |           **Local Services**           \n                   Party A |

  start

 |           **Local Services**           \n                   Party A |
  :Party A starts the lead leg.;

  :The ""Corda"" service extracts the
  raw signed transaction from Party A's
  records and submits it the
  ""CrosschainApplication"" SDK as
  part of a settlement instruction.;

 |           **Local Services**           \n                   Party B |

  :The ""CrosschainApplication"" SDK
  receives a settlement instruction and
  calls the ""CrosschainMessaging"" SDK
  to construct the proof.;

  #Pink:The ""CrosschainMessaging"" SDK
  constructs a Corda transaction attestation
  proof, to be used as proof that the trade
  was cancelled on the Corda network.;

  #lightGreen:The ""CrosschainFunctionCall"" SDK
  uses the proof to perform a crosschain
  function call with Network B as destination
  network, the ""XvP"" contract as destination
  contract and ""requestFollowLeg"" function
  call data. It submits the instruction to the
  ""CrosschainFunctionCall"" contract by
  calling its ""inboundCall"" function with the
  provided parameters.;


|              **Network B**              \n                Ethereum |

  #lightGreen:The ""CrosschainFunctionCall"" contract
  calls the ""CrosschainMessaging"" contract's
  ""decodeAndVerify"" function with provided
  arguments.;
  #Pink:The ""CrosschainMessaging"" contract
  verifies the transaction attestation proof,
  returning the verified function call
  data contained within.;
  #lightGreen:The ""CrosschainFunctionCall"" contract
  invokes the verified ""requestFollowLeg""
  function call on the ""XvP"" contract.;
  :The ""XvP"" contract checks that the trade
  is not marked as cancelled and that the
  hold exists. It executes the hold,
  transferring funds from Party B's
  account to Party A's account, and calls
  the ""CrosschainFunctionCall"" contract's
  ""outboundCall"" function with Network A
  as destination network, the ""XvP"" contract
  as destination contract, and
  ""completeLeadLeg"" function call data.;
  #lightGreen:The ""CrosschainFunctionCall"" contract
  emits the ""CrosschainFunctionCall""
  event with given data.;

 |           **Local Services**           \n                   Party B |

  #lightGreen:The ""CrosschainFunctionCall"" SDK
  monitors for events and once received
  calls the ""CrosschainMessaging"" SDK;
  #Pink:The ""CrosschainMessaging"" SDK
  constructs an Ethereum event
  attestation proof, to be used as
  proof that the follow leg hold was
  executed.;
  #lightGreen:The ""CrosschainFunctionCall"" SDK
  records the proof so that the
  ""CrosschainApplication"" SDK can
  return it as part of a callback
  response to a settlement instruction.;
  :The ""CrosschainApplication"" SDK
  returns the response to the ""Corda""
  service as part of a callback from
  the original settlement instruction.;

 |           **Local Services**           \n                   Party A |

  :The ""Corda"" service extracts the
  Ethereum proof from the instruction
  callback and initiates the Corda
  flow to complete the lead leg.;

|              **Network A**              \n                   Corda |

  :Party A verifies the proof after
  checking current network state for
  the provided trade id. Party A
  creates a draft transaction,
  executing the hold by transferring
  the securities to Party B.
  Party B signs the transaction after
  validating it, and the notary
  finalises it after verifying
  unique transaction inputs.;
  stop

@enduml

